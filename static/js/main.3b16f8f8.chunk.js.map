{"version":3,"sources":["StartPage.js","simplifiedFormSchema.js","Submit.js","Select.js","UserInfoForm.js","Loader.js","ToggleButtons.js","NavBar.js","PolicyNumberDisplay.js","PolicyDataPlots.js","PolicyComparisonSection.js","Intro.js","PairwiseComparison.js","StepGenerator.js","TopNavBar.js","EndPage.js","App.js","reportWebVitals.js","index.js","FormErrorMessages.js"],"names":["StartPage","props","nextPage","bind","this","toggleStartPage","toggleUserInfoForm","showStartPage","Fragment","Container","className","showResumeButton","Button","color","size","type","onClick","readStatefromLS","React","Component","schema","properties","username","minLength","age","label","minimum","name","value","race_ethnicity","gender","marital_status","education","political","positive_family","positive_anyone","healthcare_yn","healthcare_role","required","Submit","loading","success","rest","disabled","defaultProps","Select","classNamePrefix","UserInfoForm","state","formData","defaultMessage","selectFieldMessage","usernameFieldMessage","healthcareroleFieldMessage","handleChange","handleSubmit","data","setState","updateUserInfo","setTimeout","incrementStep","console","log","userInfo","writeStatetoLS","showForm","onChange","onSubmit","Row","FormGroup","Label","style","width","Col","md","errorMessages","component","isClearable","newVal","handleFieldChange","options","placeholder","Loader","class","wrapup","ToggleButtons","useState","selected","setSelected","ToggleButtonGroup","exclusive","event","newSelected","onSelectChange","toggleDisabled","id","ToggleButton","BottomNavBar","sectionNames","submitDisabled","setSubmitedDisabled","Navbar","light","expand","fixed","paddingLeft","paddingRight","Nav","navbar","map","idx","NavItem","NavLink","href","toString","makeNavItem","choice","submitChoice","UncontrolledTooltip","placement","target","hidden","PolicyNumberDisplay","columnNums","Jumbotron","values","slice","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","labels","defaults","animation","font","backgroundColors","borderColors","PolicyDataPlot","plotType","updateMaxYVal","maxYVal","plotOptions","responsive","scales","y","ticks","callback","index","toFixed","plugins","tooltip","enabled","legend","display","datalabels","clamp","formatter","context","Math","round","createChartJsData","choosePlotType","cleanAxisLabels","reg_exp","replace","column_start","column_end","dat","suggestedMax","labs","bg_colors","border_colors","push","grid","drawBorder","datasets","backgroundColor","borderColor","borderWidth","redraw","ChartDataLabels","PolicyComparisonSection","sectionType","policyData","sectionNum","title","description","generatePlotColumn","lg","fluid","marginBottom","Intro","onExit","stepsEnabled","initialStep","steps","element","intro","hideNext","disableInteraction","SERVER_URL","USER_CHOICES_MAP","PREDICTIONS_MAP","PairwiseComparison","e","preventDefault","stepNum","maxSteps","pushBackChoice","pushBackStage","updatePolicyIDs","policy_ids","pushBackPolicyShown","choicesInfo","sessionInfo","JSON","stringify","session_id","uuid","ip_address","ip","mturker","policiesShown","prevStages","randomize","userChoices","predictions","i","length","policy","sortedPolicies","sort","a","b","flippedChoice","String","flipPrediction","Number","flippedPrediction","prevPredictions","question_num","policy_a","policy_b","policy_dataset","policyDataSet","user_choice","prediction","algorithm_stage","userFormInfo","axios","post","headers","then","response","toggleEndPage","removeStateFromLS","prevChoices","randomizePolicyids","pushBackPrediction","updateStage","catch","err","showError","toggleLoading","graphData","onListChanged","updateShowError","prepareCardData","postFinalData","next","sectionInfo","sectionName","sectionDescription","show","Promise","resolve","setStateAsync","maxVals","reduce","max","section","prepped_dat","x","Step","currentStep","toggleWrapUp","StepList","choiceData","numSteps","Array","fill","elem","TopNavBar","NavbarBrand","role","EndPage","showEndPage","App","showUserInfoForm","showSteps","algorithmStage","floor","random","numExploration","numValidation","uuidv4","pushBackChoices","handleUnload","isArray","every","val","orig_id","permuted_id","array","randomIndex","new_array","currentIndex","shuffled_ids","shuffle","updatedPrediction","ls","set","loadedState","get","parse","remove","toggleShowSteps","ids","stage","toUpdate","_","omit","Object","keys","obj","key","isObject","toPostData","window","removeEventListener","addEventListener","loadableState","state_info","fetch","loc_response","json","IPv4","urlSearchParams","URLSearchParams","location","search","fromEntries","entries","mturk","datasetName","method","url","policyDataResponse","marginTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","exports"],"mappings":"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,QAAS,CACL,CACIrD,KAAM,yBACNF,MAAO,yBACPG,MAAO,0BACT,CACED,KAAM,8BACNF,MAAO,8BACPG,MAAO,+BACT,CACED,KAAM,+BACNF,MAAO,+BACPG,MAAO,gCACT,CACED,KAAM,qEACNF,MAAO,qEACPG,MAAO,sEACT,CACED,KAAM,iCACNF,MAAO,iCACPG,MAAO,kCACT,CACED,KAAM,sCACNF,MAAO,sCACPG,MAAO,uCACT,CACED,KAAM,mBACNF,MAAO,mBACPG,MAAO,oBACT,CACED,KAAM,yBACNF,MAAO,yBACPG,MAAO,0BACT,CACED,KAAM,kBACNF,MAAO,kBACPG,MAAO,mBACT,CACED,KAAM,sBACNF,MAAO,sBACPG,MAAO,uBACT,CACED,KAAM,mBACNF,MAAO,mBACPG,MAAO,qBAGfA,MAAOqB,EAASjB,YAEpB,cAAC,IAAD,CACA2C,cAAe,CACXrC,SAAU,kBAAMW,EAASE,qBAE7BxB,KAAK,oBAKb,eAAC0C,EAAA,EAAD,WACX,cAACC,EAAA,EAAD,CAAOC,MAAO,CAACC,MAAO,QAAtB,uDACA,eAACC,EAAA,EAAD,CAAKF,MAAO,CAACC,MAAO,QAASE,GAAG,IAAhC,UACmB,cAAC,IAAD,CACIhE,UAAU,GACVkE,UAAW/B,EACXlB,KAAK,YACLkD,aAAW,EACXX,SAAU,SAACY,EAAQC,GAAT,OAA+BA,EAAkB,YAAaD,IACxEE,QAAS,CACL,CACIrD,KAAM,eACNF,MAAO,eACPG,MAAO,gBACT,CACED,KAAM,aACNF,MAAO,aACPG,MAAO,cACT,CACED,KAAM,QACNF,MAAO,QACPG,MAAO,SACT,CACED,KAAM,cACNF,MAAO,cACPG,MAAO,eACT,CACED,KAAM,cACNF,MAAO,cACPG,MAAO,eACT,CACED,KAAM,aACNF,MAAO,aACPG,MAAO,cACT,CACED,KAAM,QACNF,MAAO,QACPG,MAAO,SACT,CACED,KAAM,uBACNF,MAAO,uBACPG,MAAO,yBAGfA,MAAOqB,EAAShB,YAEpB,cAAC,IAAD,CACA0C,cAAe,CACXrC,SAAU,kBAAMW,EAASE,qBAE7BxB,KAAK,o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","file":"static/js/main.3b16f8f8.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Container,\n    Button\n} from 'reactstrap';\n\nclass StartPage extends React.Component {\n    constructor(props){\n        super(props)\n        this.nextPage = this.nextPage.bind(this);\n    }\n\n    nextPage(){\n        // hide StartPage\n        this.props.toggleStartPage();\n        // show UserInfoForm\n        this.props.toggleUserInfoForm();\n    }\n\n    render(){\n        if(!this.props.showStartPage){\n            return null;\n        }\n\n        return(\n            \n            <React.Fragment>\n                <Container>\n                <h2>Help make a difference!</h2>\n                <p className=\"lead\">\n                    The questionnaires are designed to learn your preferences by displaying outcomes\n                    of different policies and learning your choices. New policy outcomes are displayed\n                    after each choice you make. The questionnaire is tailored to ask\n                    questions based on your previous choices.\n                    You can start the questionnaire by clicking on the button below. Please take the survey <b>only once</b>. \n                    Once you've started the questionnaire, <b>please do not refresh or leave the page</b>. For the survey to be accepted please take it only once and complete it in one sitting.\n                    <br></br>\n                    <br></br>\n                    <br></br>\n                    What happens if there isn’t enough medical equipment available to treat every person who gets sick with COVID-19?\n                    Who gets an ICU bed? Who gets a ventilator? Our goal is meant to find a set of guidelines to help healthcare providers\n                    decide which patients would get a bed, ventilator, or receive other lifesaving treatments in a critical care unit in an\n                    <b> event where there are more patients than necessary resources. </b>\n                </p>\n                <div>\n                    <br></br>\n                    <br></br>\n                    {this.props.showResumeButton ? \n                        <Button\n                        color='success'\n                        size=\"lg\"\n                        type=\"submit\"\n                        onClick={this.props.readStatefromLS}> \n                            Resume Questionnaire\n                        </Button> : \n                        <Button\n                        color='primary'\n                        size=\"lg\"\n                        type=\"submit\"\n                        onClick={this.nextPage}> \n                            Start Questionnaire\n                        </Button>\n                    }\n                    \n                </div>\n                </Container>\n            </React.Fragment>\n            \n            \n        )\n    }\n}\nexport default StartPage;","const schema = {\n    type: \"object\",\n    properties: {\n        username: {\n            type: 'string', minLength: 1\n        },\n      age: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n      race_ethnicity: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n      gender: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n      marital_status: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n      education: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n      political: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n      positive_family: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n      positive_anyone: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n      healthcare_yn: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n\n      healthcare_role: {\n        type: 'string', minLength: 1\n      }\n\n    },\n    required: [\"username\", \"age\", \"race_ethnicity\", \"gender\", \"marital_status\", \"education\", \"political\",\n    \"positive_family\", \"positive_anyone\",\"healthcare_yn\", \"healthcare_role\"]\n}\nexport default schema;","import PropTypes from 'prop-types';\nimport React from 'react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Button } from 'reactstrap';\n\nconst Submit = (props) => {\n\tconst {\n\t\tloading,\n\t\tsuccess,\n\t\t...rest\n\t} = props;\n\n\treturn (\n\t\t<Button\n\t\t\tcolor={success ? 'success' : 'primary'}\n\t\t\tdisabled={loading || success}\n\t\t\tsize=\"xl\"\n\t\t\ttype=\"submit\"\n\t\t\t{...rest}\n\t\t>\n\t\t\t{\n\t\t\t\t// eslint-disable-next-line no-nested-ternary\n\t\t\t\tloading\n\t\t\t\t\t? 'Loading'\n\t\t\t\t\t: success\n\t\t\t\t\t\t? 'Success'\n\t\t\t\t\t\t: 'Submit'\n\n\t\t\t}\n\t\t</Button>\n\t);\n};\n\nSubmit.propTypes = {\n\tloading: PropTypes.bool,\n\tsuccess: PropTypes.bool,\n};\n\nSubmit.defaultProps = {\n\tloading: false,\n\tsuccess: false,\n};\n\nexport default Submit;","import React from 'react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport ReactSelect from 'react-select';\n\nimport './Select.scss';\n\nconst Select = props => (\n\t<ReactSelect\n\t\tclassNamePrefix=\"Jvf_Select\"\n\t\t{...props}\n\t/>\n);\n\nexport default Select;","import React from 'react';\nimport { Field, FieldError, Form } from 'react-jsonschema-form-validation';\nimport {\n\tCol,\n\tFormGroup,\n\tLabel,\n\tRow,\n    Container\n} from 'reactstrap';\n\nimport { defaultMessage, \n    selectFieldMessage,\n    usernameFieldMessage,\n    healthcareroleFieldMessage } from './FormErrorMessages';\n\nimport './Field.scss';\nimport './FieldError.scss';\nimport schema from './simplifiedFormSchema';\nimport Submit from './Submit';\nimport Select from './Select';\nimport './UserInfoForm';\n\n\nclass UserInfoForm extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            formData: {\n                username: '',\n                age: '',\n                race_ethnicity: '',\n                gender: '',\n                marital_status: '',\n                education: '',\n                political: '',\n                positive_family: '',\n                positive_anyone: '',\n                healthcare_yn: '',\n                healthcare_role: '',\n                defaultMessage, selectFieldMessage, usernameFieldMessage, healthcareroleFieldMessage\n            },\n            loading: false,\n\t\t\tsuccess: false,\n        }\n        this.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n    };\n    handleChange(data) {\n\t\tthis.setState({\n\t\t\tformData: data,\n\t\t\tsuccess: false,\n\t\t});\n\t}\n\n    \n\n\thandleSubmit() {\n\t\tthis.setState({ loading: true });\n        // lift up form data to App component \n        this.props.updateUserInfo(this.state.formData);\n        \n\t\tsetTimeout(() => {\n\t\t\tthis.setState({ loading: false, success: true });\n            \n\t\t}, 1000);\n        this.props.toggleUserInfoForm();\n        this.props.incrementStep();\n        // save state here so state is at the beginning of the questionnaire\n        console.log(this.state.userInfo);\n        this.props.writeStatetoLS();\n        \n\t}\n\n\trender() {\n\n        if(!this.props.showForm){\n            return null;\n        }\n\n        const {\n\t\t\tformData,\n\t\t\tloading,\n\t\t\tsuccess,\n\t\t} = this.state;  \n\n        return(\n            <Container>\n                \n            <Form\n\t\t\t\tdata={formData}\n\t\t\t\tonChange={this.handleChange}\n\t\t\t\tonSubmit={this.handleSubmit}\n\t\t\t\tschema={schema}\n\t\t\t>\n                <Row className=\"mb-4\">\n                <FormGroup>\n                    {/* MAKE TEXT INPUT IN-LINE */}\n                    <Label style={{width: \"100%\"}} >Worker ID (Please use the MTurk Worker ID that we use to verify payment)</Label>\n                    <Col  style={{width: \"100%\"}} md=\"4\">\n                        <Field\n                            name=\"username\"\n                            value={formData.username}\n                            type=\"input\"\n                        />\n                        <FieldError \n                        errorMessages={{\n                            required: () => formData.usernameFieldMessage\n                        }}\n                        name=\"username\" />\n                    </Col>\n                    \n                </FormGroup>\n                <FormGroup>\n                <Label style={{width: \"100%\"}}>What is your age group?</Label>\n                    <Col style={{width: \"100%\"}} md=\"4\">\n                        <Field\n                            className=\"\"\n                            component={Select}\n                            name=\"age\"\n                            isClearable\n                            onChange={(newVal, handleFieldChange) => handleFieldChange('age', newVal)}\n                            options={[\n                                {\n                                    name: \"18-39\",\n                                    label: \"18-39\",\n                                    value: \"18-39\",\n                                },{\n                                    name: \"40-49\",\n                                    label: \"40-49\",\n                                    value: \"40-49\",\n                                },{\n                                    name: \"50-59\",\n                                    label: \"50-59\",\n                                    value: \"50-59\",\n                                },{\n                                    name: \"60-69\",\n                                    label: \"60-69\",\n                                    value: \"60-69\",\n                                },{\n                                    name: \"70-79\",\n                                    label: \"70-79\",\n                                    value: \"70-79\",\n                                },{\n                                    name: \"80+\",\n                                    label: \"80+\",\n                                    value: \"80+\",\n                                }\n                            ]}\n                            value={formData.age}\n                        />\n                        <FieldError \n                        errorMessages={{\n                            required: () => formData.selectFieldMessage\n                        }}\n                        name=\"age\" />\n\t\t\t\t</Col>\t\n\t\t\t\t\t\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n\t\t\t\t\t<Label style={{width: \"100%\"}}>What is your race/ethnicity?</Label>\n                    <Col style={{width: \"100%\"}} md=\"4\">\n                    <Field\n\t\t\t\t\t\tclassName=\"\"\n\t\t\t\t\t\tcomponent={Select}\n\t\t\t\t\t\tname=\"race_ethnicity\"\n\t\t\t\t\t\tisClearable\n\t\t\t\t\t\tonChange={(newVal, handleFieldChange) => handleFieldChange('race_ethnicity', newVal)}\n\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"American Indian or Alaska Native\",\n\t\t\t\t\t\t\t\tlabel: \"American Indian or Alaska Native\",\n\t\t\t\t\t\t\t\tvalue: \"American Indian or Alaska Native\",\n\t\t\t\t\t\t\t},{\n\t\t\t\t\t\t\t\tname: \"Asian\",\n\t\t\t\t\t\t\t\tlabel: \"Asian\",\n\t\t\t\t\t\t\t\tvalue: \"Asian\",\n\t\t\t\t\t\t\t},{\n\t\t\t\t\t\t\t\tname: \"Black or African American\",\n\t\t\t\t\t\t\t\tlabel: \"Black or African American\",\n\t\t\t\t\t\t\t\tvalue: \"Black or African American\",\n\t\t\t\t\t\t\t},{\n\t\t\t\t\t\t\t\tname: \"Hispanic or Latino\",\n\t\t\t\t\t\t\t\tlabel: \"Hispanic or Latino\",\n\t\t\t\t\t\t\t\tvalue: \"Hispanic or Latino\",\n\t\t\t\t\t\t\t},{\n\t\t\t\t\t\t\t\tname: \"Multiracial\",\n\t\t\t\t\t\t\t\tlabel: \"Multiracial\",\n\t\t\t\t\t\t\t\tvalue: \"Multiracial\",\n\t\t\t\t\t\t\t},{\n\t\t\t\t\t\t\t\tname: \"Native Hawaiian or Other Pacific Islander\",\n\t\t\t\t\t\t\t\tlabel: \"Native Hawaiian or Other Pacific Islander\",\n\t\t\t\t\t\t\t\tvalue: \"Native Hawaiian or Other Pacific Islander\",\n\t\t\t\t\t\t\t},{\n\t\t\t\t\t\t\t\tname: \"White\",\n\t\t\t\t\t\t\t\tlabel: \"White\",\n\t\t\t\t\t\t\t\tvalue: \"White\",\n\t\t\t\t\t\t\t},{\n\t\t\t\t\t\t\t\tname: \"Prefer not to Answer\",\n\t\t\t\t\t\t\t\tlabel: \"Prefer not to Answer\",\n\t\t\t\t\t\t\t\tvalue: \"Prefer not to Answer\",\n\t\t\t\t\t\t\t}\n                            \n\t\t\t\t\t\t]}\n\t\t\t\t\t\tvalue={formData.race_ethnicity}\n\t\t\t\t\t/>\n\t\t\t\t\t<FieldError \n                    errorMessages={{\n                        required: () => formData.selectFieldMessage\n                    }}\n                    name=\"race_ethnicity\" />\n                    </Col>\n\t\t\t\t\t\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n\t\t\t\t\t<Label style={{width: \"100%\"}}>What is your gender?</Label>\n                    < Col style={{width: \"100%\"}} md=\"4\"> \n                        <Field\n                            className=\"\"\n                            component={Select}\n                            name=\"gender\"\n                            isClearable\n                            onChange={(newVal, handleFieldChange) => handleFieldChange('gender', newVal)}\n                            options={[\n                                {\n                                    name: \"Female\",\n                                    label: \"Female\",\n                                    value: \"Female\",\n                                },{\n                                    name: \"Male\",\n                                    label: \"Male\",\n                                    value: \"Male\",\n                                },{\n                                    name: \"Other\",\n                                    label: \"Other\",\n                                    value: \"Other\",\n                                },{\n                                    name: \"Prefer not to answer\",\n                                    label: \"Prefer not to answer\",\n                                    value: \"Prefer not to answer\",\n                                }\n                            ]}\n                            value={formData.gender}\n                        />\n                        <FieldError\n                        errorMessages={{\n                            required: () => formData.selectFieldMessage\n                        }}\n                        name=\"gender\" />   \n                    </Col>\n\t\t\t\t\t\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n\t\t\t\t\t<Label style={{width: \"100%\"}}>What is your marital status?</Label>\n                    <Col style={{width: \"100%\"}} md=\"4\">\n                        <Field\n                            className=\"\"\n                            component={Select}\n                            name=\"marital_status\"\n                            isClearable\n                            onChange={(newVal, handleFieldChange) => handleFieldChange('marital_status', newVal)}\n                            options={[\n                                {\n                                    name: \"Single (Never Married)\",\n                                    label: \"Single (Never Married)\",\n                                    value: \"Single (Never Married)\",\n                                },{\n                                    name: \"Married\",\n                                    label: \"Married\",\n                                    value: \"Married\",\n                                },{\n                                    name: \"Divorced\",\n                                    label: \"Divorced\",\n                                    value: \"Divorced\",\n                                },{\n                                    name: \"Widowed\",\n                                    label: \"Widowed\",\n                                    value: \"Widowed\",\n                                },{\n                                    name: \"Other\",\n                                    label: \"Other\",\n                                    value: \"Other\",\n                                },{\n                                    name: \"Prefer not to answer\",\n                                    label: \"Prefer not to answer\",\n                                    value: \"Prefer not to answer\",\n                                }\n                            ]}\n                            value={formData.marital_status}\n                        />\n                        <FieldError\n                        errorMessages={{\n                            required: () => formData.selectFieldMessage\n                        }}\n                        name=\"marital_status\" />\n                    </Col>\n\t\t\t\t\t\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n\t\t\t\t\t<Label style={{width: \"100%\"}}>What is the highest degree or level of school you have completed?</Label>\n                    <Col style={{width: \"100%\"}} md=\"4\">\n                        <Field\n                            className=\"\"\n                            component={Select}\n                            name=\"education\"\n                            isClearable\n                            onChange={(newVal, handleFieldChange) => handleFieldChange('education', newVal)}\n                            options={[\n                                {\n                                    name: \"No schooling completed\",\n                                    label: \"No schooling completed\",\n                                    value: \"No schooling completed\",\n                                },{\n                                    name: \"Nursery school to 8th grade\",\n                                    label: \"Nursery school to 8th grade\",\n                                    value: \"Nursery school to 8th grade\",\n                                },{\n                                    name: \"Some high school, no diploma\",\n                                    label: \"Some high school, no diploma\",\n                                    value: \"Some high school, no diploma\",\n                                },{\n                                    name: \"High school graduate, diploma or the equivalent (for example: GED)\",\n                                    label: \"High school graduate, diploma or the equivalent (for example: GED)\",\n                                    value: \"High school graduate, diploma or the equivalent (for example: GED)\",\n                                },{\n                                    name: \"Some college credit, no degree\",\n                                    label: \"Some college credit, no degree\",\n                                    value: \"Some college credit, no degree\",\n                                },{\n                                    name: \"Trade/technical/vocational training\",\n                                    label: \"Trade/technical/vocational training\",\n                                    value: \"Trade/technical/vocational training\",\n                                },{\n                                    name: \"Associate degree\",\n                                    label: \"Associate degree\",\n                                    value: \"Associate degree\",\n                                },{\n                                    name: \"Bachelor’s degree\",\n                                    label: \"Bachelor’s degree\",\n                                    value: \"Bachelor’s degree\",\n                                },{\n                                    name: \"Master's degree\",\n                                    label: \"Master's degree\",\n                                    value: \"Master's degree\",\n                                },{\n                                    name: \"Professional degree\",\n                                    label: \"Professional degree\",\n                                    value: \"Professional degree\",\n                                },{\n                                    name: \"Doctorate degree\",\n                                    label: \"Doctorate degree\",\n                                    value: \"Doctorate degree\",\n                                }\n                            ]}\n                            value={formData.education}\n                        />\n                        <FieldError\n                        errorMessages={{\n                            required: () => formData.selectFieldMessage\n                        }}\n                        name=\"education\" />\n                    </Col>\n\t\t\t\t\t\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n\t\t\t\t\t<Label style={{width: \"100%\"}}>What is your political party affiliation?</Label>\n\t\t\t\t\t<Col style={{width: \"100%\"}} md=\"4\">\n                        <Field\n                            className=\"\"\n                            component={Select}\n                            name=\"political\"\n                            isClearable\n                            onChange={(newVal, handleFieldChange) => handleFieldChange('political', newVal)}\n                            options={[\n                                {\n                                    name: \"Constitution\",\n                                    label: \"Constitution\",\n                                    value: \"Constitution\",\n                                },{\n                                    name: \"Democratic\",\n                                    label: \"Democratic\",\n                                    value: \"Democratic\",\n                                },{\n                                    name: \"Green\",\n                                    label: \"Green\",\n                                    value: \"Green\",\n                                },{\n                                    name: \"Independent\",\n                                    label: \"Independent\",\n                                    value: \"Independent\",\n                                },{\n                                    name: \"Libertarian\",\n                                    label: \"Libertarian\",\n                                    value: \"Libertarian\",\n                                },{\n                                    name: \"Republican\",\n                                    label: \"Republican\",\n                                    value: \"Republican\",\n                                },{\n                                    name: \"Other\",\n                                    label: \"Other\",\n                                    value: \"Other\",\n                                },{\n                                    name: \"Prefer not to Answer\",\n                                    label: \"Prefer not to Answer\",\n                                    value: \"Prefer not to Answer\",\n                                }\n                            ]}\n                            value={formData.political}\n                        />\n                        <FieldError\n                        errorMessages={{\n                            required: () => formData.selectFieldMessage\n                        }}\n                        name=\"political\" />\n                    </Col>\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n\t\t\t\t\t<Label style={{width: \"100%\"}}>Do you have family members who tested positive for COVID-19?</Label>\n\t\t\t\t\t<Col  style={{width: \"100%\"}} md=\"4\">\n                        <Field\n                            className=\"\"\n                            component={Select}\n                            name=\"positive_family\"\n                            isClearable\n                            onChange={(newVal, handleFieldChange) => handleFieldChange('positive_family', newVal)}\n                            options={[\n                                {\n                                    name: \"Yes\",\n                                    label: \"Yes\",\n                                    value: \"Yes\",\n                                },{\n                                    name: \"No\",\n                                    label: \"No\",\n                                    value: \"No\",\n                                },{\n                                    name: \"Unsure\",\n                                    label: \"Unsure\",\n                                    value: \"Unsure\",\n                                }\n                            ]}\n                            value={formData.positive_family}\n                        />\n                        <FieldError\n                        errorMessages={{\n                            required: () => formData.selectFieldMessage\n                        }}\n                        name=\"positive_family\" />\n                    </Col>\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n\t\t\t\t\t<Label style={{width: \"100%\"}} >Do you know anyone (other than family members) who tested positive for COVID-19?</Label>\n                    <Col style={{width: \"100%\"}} md=\"4\">\n                        <Field\n                            className=\"\"\n                            component={Select}\n                            name=\"positive_anyone\"\n                            isClearable\n                            onChange={(newVal, handleFieldChange) => handleFieldChange('positive_anyone', newVal)}\n                            options={[\n                                {\n                                    name: \"Yes\",\n                                    label: \"Yes\",\n                                    value: \"Yes\",\n                                },{\n                                    name: \"No\",\n                                    label: \"No\",\n                                    value: \"No\",\n                                },{\n                                    name: \"Unsure\",\n                                    label: \"Unsure\",\n                                    value: \"Unsure\",\n                                }\n                            ]}\n                            value={formData.positive_anyone}\n                        />\n                        <FieldError\n                        errorMessages={{\n                            required: () => formData.selectFieldMessage\n                        }}\n                        name=\"positive_anyone\" />\n                    </Col>\n\t\t\t\t\t\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n\t\t\t\t\t<Label style={{width: \"100%\"}}>Do you work in health care?</Label>\n                    <Col  style={{width: \"100%\"}} md=\"4\">\n                        <Field\n                            className=\"\"\n                            component={Select}\n                            name=\"healthcare_yn\"\n                            isClearable\n                            onChange={(newVal, handleFieldChange) => handleFieldChange('healthcare_yn', newVal)}\n                            options={[\n                                {\n                                    name: \"Yes\",\n                                    label: \"Yes\",\n                                    value: \"Yes\",\n                                },{\n                                    name: \"No\",\n                                    label: \"No\",\n                                    value: \"No\",\n                                }\n                            ]}\n                            value={formData.healthcare_yn}\n                        />\n                        <FieldError\n                        errorMessages={{\n                            required: () => formData.selectFieldMessage\n                        }}\n                        name=\"healthcare_yn\" />\n                    </Col>\n\t\t\t\t\t\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n                    <Label style={{width: \"100%\"}}>If you answered yes to the above question, what is your role? Otherwise enter \"NA\".</Label>\n                    <Col style={{width: \"100%\"}} md=\"4\" >\n                        <Field className=\"\"\n                            name=\"healthcare_role\"\n                            value={formData.healthcare_role}\n                            type=\"input\"\n                            placeholder=\"NA\"\n                        />\n                        <FieldError \n                        errorMessages={{\n                            required: () => formData.healthcareroleFieldMessage\n                        }}\n                        name=\"healthcare_role\" />\n                    </Col>\n\n                </FormGroup>\n                </Row>\n                <Row className=\"mb-4\">\n\t\t\t\t\t<Col md=\"10\" className=\"\">\n\t\t\t\t\t\t<Submit loading={loading} success={success} />\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n            </Form>\n            </Container>\n        );\n    }\n}\n\nexport default UserInfoForm;","import './Loader.scss';\n\n\nconst Loader = (props) => (\n  <>\n  <div class=\"loading\">\n    <div></div>\n    <div></div>\n    <div></div>\n  </div>\n  <div class=\"text-center\">\n    {props.wrapup ? \n    <h1>Submitting your responses, please do not refresh the page</h1>:\n    <h1>Loading next response, please do not refresh the page</h1>\n    \n    }\n    \n  </div>\n  \n  </>\n  \n);\n\nexport default Loader;","import React from 'react';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nexport default function ToggleButtons(props) {\n  const [selected, setSelected] = React.useState(\"\");\n\n  const handleSelected = (event, newSelected) => {\n    if(newSelected === null){\n      //they deselected the current option\n      \n      setSelected(\"\");\n      props.onSelectChange(\"\");\n      props.toggleDisabled(true);\n    } else {\n      console.log(\"newSelected\", newSelected);\n      setSelected(newSelected);\n      // also need to lift this information up through props\n      props.onSelectChange(newSelected);\n      props.toggleDisabled(false);\n    }\n    \n  };\n\n  return (\n    <ToggleButtonGroup\n      value={selected}\n      exclusive\n      onChange={handleSelected}\n      aria-label=\"policy choices\"\n      id=\"choices_button_group\"\n    >\n      <ToggleButton className=\"bottom_navbar\" value=\"1\" >\n        Policy A\n      </ToggleButton>\n      <ToggleButton className=\"bottom_navbar\" value=\"-1\" >\n        Policy B\n      </ToggleButton>\n      <ToggleButton className=\"bottom_navbar\" value=\"0\">\n        Indifferent\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}","import React, { useState } from 'react';\nimport {\n  Navbar,\n  Nav,\n  NavItem,\n  NavLink,\n  Button,\n  UncontrolledTooltip\n} from 'reactstrap';\nimport ToggleButtons from './ToggleButtons';\n\n\n\nfunction BottomNavBar(props){\n    // take as input an array of section names\n    const sectionNames = props.sectionNames;\n    const [submitDisabled, setSubmitedDisabled] = useState(true);\n\n    const toggleDisabled = (choice) => setSubmitedDisabled(choice);\n\n    const makeNavItem = (sectionNames) =>{\n        return(\n        sectionNames.map((name, idx) => {\n            return(\n            <NavItem key={idx + 1}>\n                <NavLink key={idx + 1} href={\"#section_\"+(idx + 1).toString()}>{name}</NavLink>    \n            </NavItem>\n            )\n        }))\n    }\n  \n    return (\n        <React.Fragment>\n            <Navbar color=\"light\" light expand=\"md\" fixed='bottom' style={{paddingLeft: \"1.5rem\",paddingRight: \"1.5rem\"}}>\n                {/* <NavbarBrand href=\"/\">reactstrap</NavbarBrand> */}\n                    <Nav className=\"mr-auto\" id=\"sections\" navbar>\n                    {makeNavItem(sectionNames)}\n                    </Nav>\n                    <Nav className=\"ms-auto\" navbar>\n                        <ToggleButtons \n                            toggleDisabled={toggleDisabled}\n                            onSelectChange={props.onSelectChange}\n                        >\n\n                        </ToggleButtons>\n                        <span id=\"submitWrapper\">\n                            <Button \n                                className=\"bottom_navbar_submit\"\n                                id=\"submitButton\" \n                                disabled={submitDisabled}\n                                onClick={props.submitChoice}>\n                                Submit Selection\n                            </Button>\n                        </span>\n                        <UncontrolledTooltip placement=\"top\" target=\"submitWrapper\" hidden={!submitDisabled}>\n                            Please select an option.\n                        </UncontrolledTooltip>\n                        \n                        \n                        \n                        \n                    \n                    </Nav>\n            </Navbar>\n            \n        </React.Fragment>\n    );\n  }\n  \n  export default BottomNavBar;","import React from 'react';\nimport { Jumbotron } from 'reactstrap';\n\nclass PolicyNumberDisplay extends React.Component{\n    constructor(props){\n        super(props)\n        this.data = this.props.data\n        this.columnNums = this.props.columnNums\n    }\n\n    render(){\n        return(\n            <Jumbotron>\n                <h1>{this.data.values.slice(this.columnNums[0],this.columnNums[1]+1).toLocaleString(undefined,\n                    {   \n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    })}\n                </h1>\n                <p>\n                    {this.data.labels.slice(this.columnNums[0], this.columnNums[1]+1)}\n                </p>\n            </Jumbotron>\n        )\n    }\n}\nexport default PolicyNumberDisplay;","import React from 'react';\nimport { Bar, Pie } from 'react-chartjs-2';\nimport { defaults } from 'react-chartjs-2';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\n\n\n\n// Disable animating charts by default.\ndefaults.animation = false;\ndefaults.font.size=16;\n\nconst backgroundColors = [\n    'rgba(255, 99, 132, 0.2)',\n    'rgba(54, 162, 235, 0.2)',\n    'rgba(255, 206, 86, 0.2)',\n    'rgba(75, 192, 192, 0.2)',\n    'rgba(153, 102, 255, 0.2)',\n    'rgba(255, 159, 64, 0.2)',\n];\n\nconst borderColors = [\n    'rgba(255, 99, 132, 1)',\n    'rgba(54, 162, 235, 1)',\n    'rgba(255, 206, 86, 1)',\n    'rgba(75, 192, 192, 1)',\n    'rgba(153, 102, 255, 1)',\n    'rgba(255, 159, 64, 1)',\n];\n\n\nclass PolicyDataPlot extends React.Component {\n    constructor(props){\n        super(props);\n        this.plotType = this.props.plotType;\n        this.updateMaxYVal = this.props.updateMaxYVal;\n        this.maxYVal = this.props.maxYVal;\n        this.data = this.props.data;\n        this.columnNums= this.props.columnNums; //start and end columns\n        this.plotOptions = {\n            responsive: true,\n            scales: {\n                y: {\n                    ticks: {\n                        // Include a dollar sign in the ticks\n                        callback: function(value, index, values) {\n                            return (value*100).toFixed(0) + \"%\";\n                        }\n                    }\n                }\n             },\n            plugins: {\n                tooltip:{\n                    enabled: false\n                },\n                legend: {\n                    display: false\n                },\n                datalabels: {\n                    display: true,\n                    color: \"black\",\n                    // align: \"end\",\n                    // anchor: \"end\",\n                    clamp:true,\n                    font: { size: \"16\" },\n                    formatter: function(value, context) {\n                        return Math.round(value*100).toFixed(0) + '%';\n                      }\n                  }\n            }\n        };\n        this.createChartJsData = this.createChartJsData.bind(this);\n        this.choosePlotType = this.choosePlotType.bind(this);\n        this.cleanAxisLabels = this.cleanAxisLabels.bind(this);\n    }\n\n\n\n    cleanAxisLabels(labels){\n        const reg_exp = /.*_/i\n        var cleaned_labels = labels.map((label) => {\n            if(label === \"Overall survival probability\"){\n                label = \"Survived\";\n            }\n            return(label.replace(reg_exp,\"\"));\n        })\n        return(cleaned_labels);\n    }\n\n\n    createChartJsData(data, plotType, column_start, column_end){\n        var dat = data.values.slice(column_start,column_end+1);\n        this.plotOptions.scales.y.suggestedMax =this.maxYVal;\n        var labs = this.cleanAxisLabels(data.labels.slice(column_start,column_end+1));\n\n        var bg_colors = backgroundColors.slice(0, (column_end - column_start + 1));\n        var border_colors = borderColors.slice(0, (column_end - column_start + 1));\n\n        if(plotType === \"pie\"){\n            dat.push((1-dat[0]));\n            labs.push(\"Deceased\");\n            bg_colors = backgroundColors.slice(0, (column_end - column_start + 2)); // do this so we get additional color for completment\n            border_colors = borderColors.slice(0, (column_end - column_start + 2));\n\n            this.plotOptions = {\n                responsive: true,\n                scales: {\n                    y: {\n                        ticks: {\n                            display:false\n                        },\n                        grid: {\n                            display:false,\n                            drawBorder:false\n                        }\n                    },\n                 },\n                plugins: {\n                    tooltip:{\n                        enabled: false\n                    },\n                    legend: {\n                        display: true,\n                        labels: {\n                            font :{\n                                size : 20\n                            }\n                        }\n                    },\n                    datalabels: {\n                        display: true,\n                        color: \"black\",\n                        clamp:true,\n                        // align: \"end\",\n                        // anchor: \"end\",\n                        font: { size: \"16\" },\n                        formatter: function(value, context) {\n                            return Math.round(value*100).toFixed(0) + '%';\n                          }\n                      }\n                }\n            };\n\n        }\n        const chartData = {\n            labels: labs,\n            datasets: [\n                {\n                    data: dat,\n                    backgroundColor: bg_colors,\n                    borderColor: border_colors,\n                    borderWidth: 1,\n                }\n            ]\n        }\n        // console.log(\"chartData: \", chartData)\n        return chartData;\n    }\n\n    choosePlotType(){\n        switch(this.plotType){\n            case \"bar\":\n                return(<Bar data={this.createChartJsData(this.data, this.plotType, this.columnNums[0], this.columnNums[1])}\n                    options={this.plotOptions} redraw={false} plugins={[ChartDataLabels]}\n                />)\n            case \"pie\":\n                return(<Pie data={this.createChartJsData(this.data, this.plotType, this.columnNums[0], this.columnNums[1])}\n                options={this.plotOptions} redraw={false} plugins={[ChartDataLabels]}\n            />)\n            default:\n                return(null)\n        }\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                {this.choosePlotType()}\n            </React.Fragment>\n            \n            \n        )\n    }\n}\n\nexport default PolicyDataPlot;","import React from 'react';\nimport { Col, Container, Row } from 'reactstrap';\nimport PolicyNumberDisplay from './PolicyNumberDisplay';\nimport './PolicyComparisonSection.css'\nimport PolicyDataPlot from './PolicyDataPlots';\n\nclass PolicyComparisonSection extends React.Component{\n    constructor(props){\n        super(props)\n        this.sectionType = this.props.sectionType;\n        this.plotType = this.props.plotType;\n        this.policyData = this.props.policyData;\n        this.columnNums = this.props.columnNums;\n        // console.log(\"Policy data: \", this.policyData);\n        this.sectionNum = this.props.sectionNum;\n        this.title=this.props.title;\n        this.description=this.props.description;\n        this.maxYVal = this.props.maxYVal;\n        this.generatePlotColumn = this.generatePlotColumn.bind(this);\n        \n\n    }\n\n    choosePlotType(sectionType, plotType, data, columnNums, idx){\n        // console.log(\"sectionType \", sectionType);\n        switch(sectionType){\n            case \"plot\":\n                return( <PolicyDataPlot key={idx} plotType={plotType}\n                     data={data['graphData']} columnNums={columnNums} \n                     maxYVal={this.maxYVal}/>);\n            case \"number\":\n                return(<PolicyNumberDisplay key={idx} data={data['graphData']} columnNums={columnNums} />);\n            default:\n                return(null);\n        }\n    }\n\n    generatePlotColumn(policyData){\n        return(\n            policyData.map((data, idx) => {\n                return(\n                    <React.Fragment>\n                        <Col lg={this.plotType === \"pie\"? \"4\" : \"6\"}\n                        className=\"text-center\" id={`section_${this.sectionNum}_policy_${(idx + 1) % 2 === 0 ? \"B\" : \"A\"}`}>\n                            <h3> Policy {(idx + 1) % 2 === 0 ? \"B\" : \"A\" }</h3>\n                            {this.choosePlotType(this.sectionType, this.plotType, data, this.columnNums, idx)}\n                        </Col>\n                    </React.Fragment>\n                )\n            })\n        )\n        \n    }\n\n    render() {\n        return(\n                <div className=\"section_container text-center\" id={\"section_\"+this.sectionNum}>\n                    <h2>\n                        {this.title}\n                    </h2>\n                    <p>{this.description}</p>\n                    <Container fluid={true} style={{marginBottom: \"5rem\"}}>\n                        {this.plotType === \"pie\"? \n                        <Row className=\"justify-content-center\">\n                            {this.generatePlotColumn(this.policyData)}\n                        </Row>: \n                        <Row>\n                            {this.generatePlotColumn(this.policyData)}\n                        </Row>    \n                        }\n                        \n                    </Container>\n                    \n                </div>\n        );\n    }\n}\n\nexport default PolicyComparisonSection;","import React from \"react\";\nimport { Steps} from \"intro.js-react\";\n\nimport \"intro.js/introjs.css\";\n\nexport default class Intro extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            stepsEnabled: true,\n            initialStep: 0,\n            steps: [\n              {\n                element: \"#policy_comparison_container\",\n                intro: \"Throughout the questionnaire, different policies will be displayed under the headings Policy A and Policy B\"\n              },\n              {\n                element: \"#section_2\",\n                intro: \"The outcomes of each policy are displayed in the form of bar and pie charts\"\n              },\n              {\n                element: \"#section_2_policy_A\",\n                intro: \"This plot shows the outcomes from policy A\"\n              },\n              {\n                element: \"#section_2_policy_B\",\n                intro: \"This plot shows the outcomes from policy B\"\n              },\n              {\n                element: \"#section_1\",\n                intro: `We use the metric \"life years saved,\" which is based on the life expectancies of those that will recover from COVID-19 under a given policy. Policies with higher life years saved values will, in general, save lives that are younger than those with lower life years saved.`\n              },\n            //   {\n            //     element: \"#section_2\",\n            //     intro: \"The outcomes of each policy are displayed in the form of bar and pie charts\"\n            //   },\n              {\n                element: \"#sections\",\n                intro: \"Clicking here allows you to jump to the different sections\"\n              },\n              {\n                element: \"#choices_button_group\",\n                intro: \"Once you have finished comparing the outcomes of the two policies, click one of the buttons which matches your preference\"\n              },\n              {\n                element: \"#submitButton\",\n                intro: \"Once you have selected a policy, click here to submit your selection and move to the next policy\"\n              },\n              {\n                element: \".title\",\n                intro: \"For your response to be counted, please answer all of the questions. Do not close or refresh this page until instructed to do so.\"\n              }\n            ]\n          };   \n    }\n    render() {\n        const {\n          stepsEnabled,\n          steps,\n          initialStep\n        } = this.state;\n    \n        return (\n            <Steps\n              enabled={stepsEnabled}\n              steps={steps}\n              initialStep={initialStep}\n              onExit={this.onExit}\n              options={{ hideNext: false,\n                disableInteraction: true }}\n            />\n        );\n      }\n    \n    onExit = () => {\n    this.setState(() => ({ stepsEnabled: false }));\n    };\n}","import React from 'react';\nimport Loader from \"./Loader\";\nimport BottomNavBar from './NavBar';\nimport { Container} from 'reactstrap';\nimport PolicyComparisonSection from './PolicyComparisonSection';\nimport './PolicyComparisonSection'\nimport axios from 'axios';\nimport Intro from './Intro';\n\n\nconst SERVER_URL = \"http://localhost:8000\";\n\nconst USER_CHOICES_MAP = {\n  \"1\" : \"policy_A\",\n  \"-1\" : \"policy_B\",\n  \"0\" : \"indifferent\",\n}\n\nconst PREDICTIONS_MAP = {\n  \"1\" : \"policy_A\",\n  \"-1\" : \"policy_B\",\n  \"0\" : \"indifferent\",\n  \"garbage_validation\": \"garbage_validation\"\n}\n\n\nclass PairwiseComparison extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            showError: false,\n            selected: -1,\n            loading: false,\n            wrapup: false,\n        }\n        // this.loading = this.props.loading\n        this.toggleLoading = this.props.toggleLoading;\n        this.graphData = this.props.graphData;\n        this.policy_ids = this.props.policy_ids;\n\n        // post data\n        this.userChoices = this.props.userChoices;\n        this.policiesShown = this.props.policiesShown;\n        this.policyDataSet = this.props.policyDataSet;\n        this.userInfo = this.props.userInfo;\n        this.ip = this.props.ip;\n        this.uuid = this.props.uuid;\n\n        this.stepNum = this.props.stepNum;\n        this.maxSteps = this.props.maxSteps;\n        this.updatePolicyIDs=this.props.updatePolicyIDs;\n        this.updateStage = this.props.updateStage;\n        this.pushBackPolicyShown=this.props.pushBackPolicyShown;\n        this.pushBackStage=this.props.pushBackStage;\n\n        this.incrementStep = this.props.incrementStep;\n\n        this.onListChanged = this.onListChanged.bind(this);\n        this.updateShowError = this.updateShowError.bind(this);\n        this.prepareCardData = this.prepareCardData.bind(this);\n        this.postFinalData=this.props.postFinalData;\n        this.toggleEndPage = this.props.toggleEndPage;\n\n\n        // lift up state function\n        this.pushBackChoice = this.pushBackChoice.bind(this);\n        \n        // go to next step or end function\n        this.next = this.props.next;\n\n        this.sectionInfo = [{\n          sectionType : \"number\",\n          columnNums: [7,7],\n          sectionName: \"Life Years Saved\",\n          sectionDescription: \"\"\n        },{\n          sectionType : \"plot\",\n          plotType : \"pie\",\n          columnNums: [8,8],\n          sectionName: \"Overall Survival Probability\",\n          sectionDescription: \"Among Those Who Contracted COVID-19 and Needed Critical Care\"\n        },\n        {\n            sectionType : \"plot\",\n            plotType : \"bar\",\n            columnNums: [0,5],\n            sectionName: \"Chance of Receiving Critical Care by Age Group\",\n            sectionDescription: \"Among People Who Need It\",\n          },\n          {\n            sectionType : \"plot\",\n            plotType : \"bar\",\n            columnNums: [9,14],\n            sectionName: \"Survival Probability\",\n            sectionDescription: \"Chance of Surviving by Age Group\"\n          }\n          \n          \n        ]\n\n    }\n\n    pushBackChoice(selected){\n        this.userChoices.push(selected);\n        console.log(\"userChoices\", this.userChoices);\n    }\n\n    onListChanged(selected) {\n        this.setState({\n        selected: selected,\n        }, function(){console.log(this.state.selected)});\n        this.updateShowError(false);\n    }\n\n    updateShowError(show){\n        this.setState({\n        showError: show\n        })\n    }\n\n    setStateAsync(state) {\n      return new Promise((resolve) => {\n        this.setState(state, resolve)\n      });\n    }\n\n    async handlePost(){\n      await this.setStateAsync({loading: true, wrapup: true});\n      this.postFinalData();\n      await this.setStateAsync({loading: false, wrapup: false});\n      // this.incrementStep();\n      // this.toggleEndPage();\n    }\n\n    submitChoice = (e) => {\n        e.preventDefault();\n        if(this.state.selected === \"\"){\n          console.log(\"somehow got here, but we shouldn't be able to if we have button disabled?\")\n            // this.setState({\n            // showError: true\n            // })\n            \n        } else{\n            // get next query\n            // this.getNextQuery(this.stepNum, this.state.selected);\n            // this.incrementStep();\n            // record the choice made\n            // console.log(this.state.selected);\n            // this.pushBackChoice(this.state.selected);\n            \n            // here we check if our next step will be greater than max steps\n            // if so, we will toggle loading and wrapup, push back final choice,\n            // post survey data and final choices, toggle loading and wrap up, and finally show the EndPage\n            if(this.stepNum + 1 > this.maxSteps){\n              \n              // push back final choice and final policies shown\n              this.pushBackChoice(this.state.selected);\n              this.pushBackStage();\n              this.updatePolicyIDs(this.policy_ids);\n              this.pushBackPolicyShown();\n              this.props.writeStatetoLS();\n\n              this.setState({loading: true, wrapup: true}, () => {\n                // const toPostData = JSON.stringify({\n                //   uuid: this.uuid,\n                //   ip: this.ip,\n                //   userChoices : this.userChoices,\n                //   userInfo : this.userInfo\n                // })\n\n                const sessionInfo = JSON.stringify({\n                  session_id : this.uuid,\n                  ip_address: this.ip,\n                  mturker: this.mturker\n                })\n                // map userChoices so we create array with objects\n                // that each contain the necessary info so we don't\n                // have to do that on the backend\n                console.log(this.policiesShown);\n                console.log(this.props.prevStages);\n                var choicesInfo;\n                // if we randomized the display of choices, then we need to flip the choices and polices\n                if(this.props.randomize){\n                  var policiesShown = [];\n                  var userChoices = [];\n                  var predictions = [];\n\n                  for(var i=0; i < this.policiesShown.length; i++){\n                    var policy = [...this.policiesShown[i]]\n                    const sortedPolicies = [...policy].sort((a,b) => a-b);\n                    console.log(policy);\n                    console.log(sortedPolicies);\n                    // use the flipPrediction function now going from \n                    // permuted policies -> sorted policies (original policies)\n                    // and flip our userChoice to match\n                    // Remember, userChoice is a string and this function needs number, but we want to send string prediction\n                    // at the end\n                    const flippedChoice = String(this.props.flipPrediction(policy, sortedPolicies, Number(this.userChoices[i])));\n                    const flippedPrediction = this.props.flipPrediction(policy, sortedPolicies, this.props.prevPredictions[i]);\n                    policiesShown[i] = sortedPolicies;\n                    userChoices[i] = flippedChoice;\n                    predictions[i] = flippedPrediction;\n                  }\n                  console.log(\"policiesShown\", policiesShown);\n                  console.log(\"userChoices\", userChoices);\n                  console.log(\"predictions\", predictions);\n                  choicesInfo = userChoices.map((choice, idx) =>{\n                    // console.log(this.policiesShown[idx][0])\n                    console.log(this.props.prevStages[idx]);\n                    const choiceInfo = {\n                      session_id: this.uuid,\n                      question_num: idx+1,\n                      policy_a: policiesShown[idx][0],\n                      policy_b: policiesShown[idx][1],\n                      policy_dataset: this.policyDataSet,\n                      user_choice: USER_CHOICES_MAP[choice],\n                      prediction: PREDICTIONS_MAP[predictions[idx]],\n                      algorithm_stage: this.props.prevStages[idx]\n                    }\n                    // return JSON.stringify(choiceInfo);\n                    return choiceInfo;\n                  })\n                } else {\n                  choicesInfo = this.userChoices.map((choice, idx) =>{\n                    // console.log(this.policiesShown[idx][0])\n                    console.log(this.props.prevStages[idx]);\n                    const choiceInfo = {\n                      session_id: this.uuid,\n                      question_num: idx+1,\n                      policy_a: this.policiesShown[idx][0],\n                      policy_b: this.policiesShown[idx][1],\n                      policy_dataset: this.policyDataSet,\n                      user_choice: USER_CHOICES_MAP[choice],\n                      prediction: PREDICTIONS_MAP[this.props.prevPredictions[idx]],\n                      algorithm_stage: this.props.prevStages[idx]\n                    }\n                    // return JSON.stringify(choiceInfo);\n                    return choiceInfo;\n                  })\n                }\n                \n\n                \n                console.log(\"choicesInfo:\", choicesInfo);\n                // const choicesInfo = JSON.stringify({\n                //   session_id: this.uuid,\n                //   userChoices : this.userChoices,\n                //   policiesShown: this.policiesShown,\n                //   policyDataSet: this.policyDataSet\n                // })\n\n                // need to unpack user info object or just add session_id key to it\n                var userFormInfo = this.userInfo;\n                userFormInfo['session_id'] = this.uuid;\n                \n                userFormInfo = JSON.stringify(userFormInfo);\n                \n                // Post the choice info\n                axios.post(`${SERVER_URL}/choices/`, choicesInfo,\n                  {\n                    headers: {\n                      'Content-Type': 'application/json'\n                    }\n                  }\n                ).then((response) =>{\n                  console.log(\"Choices response\", response)\n                })\n\n                // Post the session info\n                axios.post(`${SERVER_URL}/sessioninfo/`, sessionInfo,\n                  {\n                    headers: {\n                      'Content-Type': 'application/json'\n                    }\n                  }\n                ).then((response) =>{\n                  console.log(\"Session info resonse\", response)\n                })\n                // Post the form info and then show end page\n                axios.post(`${SERVER_URL}/forminfo/`, userFormInfo,\n                  {\n                    headers: {\n                      'Content-Type': 'application/json'\n                    }\n                  }\n                )\n                // console.log(response)\n                .then((response) =>{\n                  console.log(\"User form info\", response)\n\n                  this.setState({loading: false, wrapup: false});\n                  this.incrementStep();\n                  this.toggleEndPage();\n                  this.props.removeStateFromLS();\n                })\n                  \n              })\n              \n              // this.setState({loading: false, wrapup: false});\n              \n            } else {\n              this.setState({loading: true}, () => {\n                // before we send the previous choices to the server, we need to update:\n                // selected, current stage, and policy shown\n                this.pushBackChoice(this.state.selected);\n                this.pushBackStage();\n                this.pushBackPolicyShown();\n                this.props.writeStatetoLS();\n                console.log(this.props.prevStages);\n                // this request needs to pass data to the endpoint\n                // if we are randomizing the display of policies, we need to reorder them before \n                // sending them back to the backend to avoid Gurobi crashing\n                var prevChoices = '';\n                if(this.props.randomize){\n                  var policiesShown = [];\n                  var userChoices = [];\n\n                  for(var i=0; i < this.policiesShown.length; i++){\n                    var policy = [...this.policiesShown[i]]\n                    const sortedPolicies = policy.sort((a,b) => a-b);\n                    // use the flipPrediction function now going from \n                    // permuted policies -> sorted policies (original policies)\n                    // and flip our userChoice to match\n                    // Remember, userChoice is a string and this function needs number, but we want to send string prediction\n                    // at the end\n                    const flippedChoice = String(this.props.flipPrediction(policy, sortedPolicies, Number(this.userChoices[i])));\n                    policiesShown[i] = sortedPolicies;\n                    userChoices[i] = flippedChoice;\n                  }\n                  prevChoices = JSON.stringify({\n                    policiesShown: policiesShown,\n                    userChoices : userChoices,\n                    prevStages: this.props.prevStages\n                  })\n                } else{\n                  prevChoices = JSON.stringify({\n                    policiesShown: this.policiesShown,\n                    userChoices : this.userChoices,\n                    prevStages: this.props.prevStages\n                  })\n  \n                }\n                \n                // axios.get(`${SERVER_URL}/next_query/${this.stepNum}`,\n                axios.post(`http://127.0.0.1:8000/next_query/`,prevChoices,\n                  {\n                    headers: {\n                      'Content-Type': 'application/json'\n                    },\n                    \n                  })\n                .then((response) => {\n                  console.log(this.props.randomize);\n                  if(this.props.randomize){\n                    console.log(\"original policy_id\" , response.data.policy_ids)\n                    console.log(\"original prediction\" , response.data.prediction)\n                    this.props.randomizePolicyids(response.data.policy_ids, response.data.prediction)\n                    \n                  } else{\n                    this.updatePolicyIDs(response.data.policy_ids);\n                    this.props.pushBackPrediction(response.data.prediction)\n                  }\n                  \n                  // move to next step and update stage for the next step\n                  this.incrementStep();\n                  this.updateStage();\n                  // this.pushBackChoice(this.state.selected);\n                  this.props.writeStatetoLS();\n                  \n                  this.setState({loading: false});\n                })\n                .catch((err) => {\n                  console.log(\"got error: \", err)\n                })\n              })\n            }\n\n            \n            \n            \n            \n        }\n    }\n\n    \n\n    prepareCardData(graphData,policy_ids, columnNums){\n        var maxVals = []\n        var dat = []\n        for(var i=0; i < policy_ids.length; i++){\n            dat.push(\n              {graphData: graphData[policy_ids[i]]}\n            );\n            // dat[i]['graphData'] = graphData[policy_ids[i]];\n            // for each policy take the max of the column values\n            maxVals.push(graphData[policy_ids[i]]['values'].slice(columnNums[0], columnNums[1]).reduce(\n              function(a, b) {return Math.max(a, b);}, 0));\n        }\n        return {\"dat\": dat, \"maxYVal\": maxVals.reduce(function(a, b) {return Math.max(a, b);}, 0)};\n    }\n\n\n    render() {\n        // cardContents contains title, description, and graph data\n        // we will use the policy ids to population the graph data element in cardContents\n      return (\n        // <div className=\"column\">\n        <React.Fragment>\n          {this.stepNum === 1 ? <Intro/> : null}\n          {this.state.loading ? <Loader wrapup={this.state.wrapup} /> : null}\n\n            {this.state.loading ? null : \n            <div>\n\n            <Container id=\"policy_comparison_container\" fluid={false}>\n\n              <h1 className=\"title\">Question {this.stepNum} / {this.maxSteps}</h1>\n              {\n                this.sectionInfo.map((section, index) => {\n                  const prepped_dat = this.prepareCardData(this.graphData, this.policy_ids, section.columnNums);\n                  return(\n                    <PolicyComparisonSection\n                      key={index}\n                      plotType={section.plotType}\n                      sectionType={section.sectionType}\n                      policyData={prepped_dat['dat']}\n                      maxYVal={prepped_dat['maxYVal']}\n                      sectionNum={index+1}\n                      columnNums={section.columnNums}\n                      title={section.sectionName}  \n                      description={section.sectionDescription}\n                    />\n                  )\n                })\n              }\n                \n            </Container>\n            <BottomNavBar \n              sectionNames={this.sectionInfo.map((x)=> x.sectionName)} \n              onSelectChange={this.onListChanged}\n              submitChoice={this.submitChoice}\n              toggleLoading={this.toggleLoading}\n            />\n            </div>\n            }\n            \n        </React.Fragment>\n        );\n    }\n  }\n\n  export default PairwiseComparison;","import React from 'react';\nimport PairwiseComparison from './PairwiseComparison';\nimport {\n    Container\n} from 'reactstrap';\n\n\nclass Step extends React.Component{\n    constructor(props) {\n        super(props)\n        this.maxSteps = this.props.maxSteps;\n        this.stepNum = this.props.stepNum; // which step is this\n        this.currentStep = this.props.currentStep; // which step is the app currently on?\n        this.loading = this.props.loading;\n        this.toggleLoading = this.props.toggleLoading;\n        this.wrapup = this.props.wrapup;\n        this.toggleWrapUp = this.props.toggleWrapUp;\n        this.userChoices = this.props.userChoices;\n        this.policiesShown = this.props.policiesShown;\n        this.policyDataSet = this.props.policyDataSet;\n        this.incrementStep = this.props.incrementStep;\n        this.policyData = this.props.policyData;\n        this.policy_ids = this.props.policy_ids;\n        this.updatePolicyIDs=this.props.updatePolicyIDs;\n        this.updateStage=this.props.updateStage;\n        this.pushBackPolicyShown=this.props.pushBackPolicyShown;\n        this.pushBackStage=this.props.pushBackStage;\n        this.postFinalData=this.props.postFinalData;\n        this.toggleEndPage = this.props.toggleEndPage;\n\n        this.userInfo = this.props.userInfo;\n        this.ip = this.props.ip;\n        this.uuid = this.props.uuid;\n    }\n\n    render() { \n        if(this.currentStep !== this.stepNum ){\n            // console.log(\"I am step \"+ this.stepNum+ \" and I am hidden.\" + \" the current step is \" + this.currentStep);\n            return null\n        }\n        return(\n            // <Container fluid={true}>\n                <PairwiseComparison\n                    // title={this.data['query_title']}\n                    maxSteps={this.maxSteps} \n                    loading={this.loading}\n                    toggleLoading={this.toggleLoading}\n                    wrapup={this.wrapup}\n                    toggleWrapUp={this.toggleWrapUp}\n                    toggleEndPage={this.toggleEndPage}\n                    userChoices = {this.userChoices}\n                    policiesShown = {this.policiesShown}\n                    policyDataSet = {this.policyDataSet}\n                    incrementStep={this.incrementStep}\n                    graphData={this.policyData}\n                    policy_ids={this.policy_ids}\n                    stepNum={this.stepNum}\n                    updatePolicyIDs={this.updatePolicyIDs}\n                    updateStage = {this.updateStage}\n                    prevStages={this.props.prevStages}\n                    pushBackPolicyShown={this.pushBackPolicyShown}\n                    pushBackStage={this.pushBackStage}\n                    postFinalData={this.postFinalData}\n                    writeStatetoLS={this.props.writeStatetoLS}\n                    removeStateFromLS={this.props.removeStateFromLS}\n                    pushBackPrediction={this.props.pushBackPrediction}\n                    prevPredictions={this.props.prevPredictions}\n                    randomizePolicyids={this.props.randomizePolicyids}\n                    flipPrediction={this.props.flipPrediction}\n                    randomize={this.props.randomize}\n                    \n                    userInfo={this.userInfo}\n                    ip={this.ip}\n                    uuid={this.uuid}\n                    // pass userChoices all the way to PairwiseComparisons and from their lift up state by pushing\n                    // choices back to userChoices in App's state\n\n                />\n            // </Container>\n        );\n    }\n}\n\nclass StepList extends React.Component{\n    constructor(props) {\n        super(props)\n        this.userChoices = this.props.userChoices;\n        this.policiesShown = this.props.policiesShown;\n        this.policyDataSet = this.props.policyDataSet;\n        this.maxSteps = this.props.maxSteps;\n        this.choiceData = this.props.choiceData;\n        this.currentStep = this.props.currentStep;\n        this.loading = this.props.loading;\n        this.toggleLoading = this.props.toggleLoading;\n        this.wrapup = this.props.wrapup;\n        this.toggleWrapUp = this.props.toggleWrapUp;\n        this.toggleEndPage = this.props.toggleEndPage;\n        this.incrementStep = this.props.incrementStep;\n        this.policyData=this.props.policyData;\n        this.policy_ids=this.props.policy_ids;\n        this.sectionNames=this.props.sectionNames;\n        this.updatePolicyIDs=this.props.updatePolicyIDs\n        this.updateStage=this.props.updateStage;\n        this.pushBackPolicyShown=this.props.pushBackPolicyShown\n        this.pushBackStage=this.props.pushBackStage\n        this.postFinalData=this.props.postFinalData;\n\n        this.userInfo = this.props.userInfo;\n        this.ip = this.props.ip;\n        this.uuid = this.props.uuid;\n    }\n\n\n\n    render() {\n        var numSteps = Array(this.maxSteps).fill().map((element,index) => index+1);\n        // var contents = numSteps.map((elem) => {\n\n        //     return (\n        //         <Step key={elem.toString()} stepNum={elem} currentStep={this.currentStep}\n        //          data={this.choiceData[elem]} loading={this.loading} userChoices={this.userChoices}\n        //          incrementStep={this.incrementStep}/>\n        //     );\n        // });\n        return(\n            <Container fluid={true}>\n                {\n                    numSteps.map((elem) => {\n                            return (\n                            <Step \n                                key={elem.toString()} \n                                maxSteps={this.maxSteps} \n                                stepNum={elem} \n                                currentStep={this.currentStep}\n                                loading={this.loading} \n                                toggleLoading={this.toggleLoading} \n                                toggleEndPage={this.toggleEndPage}\n                                wrapup={this.wrapup}\n                                toggleWrapUp={this.toggleWrapUp}\n                                userChoices={this.userChoices}\n                                policiesShown = {this.policiesShown}\n                                policyDataSet = {this.policyDataSet}\n                                incrementStep={this.incrementStep}\n                                policyData={this.policyData}\n                                policy_ids={this.policy_ids}\n                                sectionNames={this.sectionNames}\n                                updatePolicyIDs={this.updatePolicyIDs}\n                                updateStage={this.updateStage}\n                                prevStages={this.props.prevStages}\n                                prevPredictions={this.props.prevPredictions}\n                                pushBackPolicyShown={this.pushBackPolicyShown}\n                                pushBackStage={this.pushBackStage}\n                                postFinalData={this.postFinalData}\n                                writeStatetoLS={this.props.writeStatetoLS}\n                                removeStateFromLS={this.props.removeStateFromLS}\n                                pushBackPrediction={this.props.pushBackPrediction}\n                                randomizePolicyids={this.props.randomizePolicyids}\n                                randomize={this.props.randomize}\n                                flipPrediction={this.props.flipPrediction}\n\n                                userInfo={this.userInfo}\n                                ip={this.ip}\n                                uuid={this.uuid}\n                            /> \n                             );\n                    })\n                }\n            </Container>\n        )    \n    }\n}\n\nexport default StepList;","import React from 'react';\nimport {\n  Navbar,\n  NavbarBrand,\n} from 'reactstrap';\n\n\n\nconst TopNavBar = (props) => {\n    return (\n        <Navbar color=\"light\" light expand=\"md\" style={{paddingLeft: \"1.5rem\"}}>\n          <NavbarBrand href=\"/\">\n            {/* TO-DO: Add alert when clicking on this to prevent people leaving accidentally */}\n              Active Preference Elicitation <span role=\"img\" aria-label=\"crystal ball\">🔮</span>\n            </NavbarBrand>\n        </Navbar>\n    );\n  }\n  \n  export default TopNavBar;","import React from 'react';\nimport {\n    Container\n} from 'reactstrap';\n\nclass EndPage extends React.Component {\n    // constructor(props){\n    //     super(props)\n    // }\n\n    render(){\n        if(!this.props.showEndPage){\n            return null;\n        }\n\n        return(\n            \n            <React.Fragment>\n                <Container>\n                <h2>Thank you for taking the quiz!</h2>\n                <p className=\"lead\">\n                    You may now close this page.\n                </p>\n                </Container>\n            </React.Fragment>\n            \n            \n        )\n    }\n}\nexport default EndPage;","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport _ from 'lodash';\nimport axios from 'axios';\nimport ls from 'local-storage';\nimport {Container} from 'reactstrap';\n\nimport StartPage from './StartPage';\nimport UserInfoForm from './UserInfoForm';\nimport StepList from './StepGenerator';\nimport TopNavBar from './TopNavBar';\nimport EndPage from './EndPage';\nimport './Card.scss';\n\n\n\nconst SERVER_URL = \"http://localhost:8000\";\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      // track which step we are on and the choices made so far\n      currentStep: 0,\n      userChoices : [],\n      predictions : [],\n      policiesShown: [], // store the policy ids we've seen so far as an array of arrays e.g., [[2,3], [3,4],...]\n\n      // handle loading screen toggle\n      loading: false,\n\n      // toggle show Userinfo form\n      showUserInfoForm: false,\n\n      // toggle show Start page\n      showStartPage: true,\n\n      // toggle show End page,\n      showEndPage: false,\n\n      // toggle show steps\n      showSteps: false,\n\n      showResumeButton: false,\n\n      // toggle which loading message we show. this is used for when we are submitting final responses\n      wrapup: false,\n\n      // Initially we randomly assign to one of two streams\n      // 0: adaptive, 1: fixed\n      // Then, once we've gotten our policy of interest, we switch to \"evaluation\"\n      // this info needs to be passed along when we make requests to get next query\n      algorithmStage: Math.floor(Math.random()*2) === 0 ? \"adaptive\" : \"random\",\n      prevStages: [],\n\n      policy_ids: [],\n      policyData: [],\n      policyDataSet: '',\n\n      // form info\n      userInfo: {\n        username: '',\n        age: '',\n        race_ethnicity: '',\n        gender: '',\n        marital_status: '',\n        education: '',\n        political: '',\n        positive_family: '',\n        positive_anyone: '',\n        healthcare_yn: '',\n        healthcare_role: ''\n      }\n    }\n    this.randomize = true;\n    this.numExploration = 3;\n    this.numValidation = 1;\n    this.maxSteps = this.numExploration+this.numValidation;\n    this.uuid = uuidv4();\n\n\n\n    // binding functions\n    this.toggleUserInfoForm = this.toggleUserInfoForm.bind(this);\n    this.toggleStartPage = this.toggleStartPage.bind(this);\n    this.toggleEndPage = this.toggleEndPage.bind(this);\n    this.updateUserInfo = this.updateUserInfo.bind(this);\n    this.incrementStep = this.incrementStep.bind(this);\n    this.toggleLoading = this.toggleLoading.bind(this);\n    this.toggleWrapUp = this.toggleWrapUp.bind(this);\n    this.updatePolicyIDs = this.updatePolicyIDs.bind(this);\n    this.updateStage = this.updateStage.bind(this);\n    this.pushBackChoices = this.pushBackChoices.bind(this);\n    this.pushBackPrediction = this.pushBackPrediction.bind(this);\n    this.pushBackPolicyShown = this.pushBackPolicyShown.bind(this);\n    this.pushBackStage = this.pushBackStage.bind(this);\n    this.postFinalData = this.postFinalData.bind(this);\n    this.writeStatetoLS = this.writeStatetoLS.bind(this);\n    this.readStatefromLS = this.readStatefromLS.bind(this);\n    this.removeStateFromLS = this.removeStateFromLS.bind(this);\n    this.handleUnload = this.handleUnload.bind(this);\n    this.randomizePolicyids = this.randomizePolicyids.bind(this);\n    this.flipPrediction = this.flipPrediction.bind(this);\n\n  }\n\n  // helper functions for randomizing plots\n  arrayEquals(a, b) {\n    return Array.isArray(a) &&\n      Array.isArray(b) &&\n      a.length === b.length &&\n      a.every((val, index) => val === b[index]);\n  }\n\n  flipPrediction(orig_id, permuted_id, prediction){\n    if(orig_id[0] === permuted_id[0]){\n      return(prediction);\n    } else {\n      // if the two arrays are not equal, then our values were fliped and we need to\n      // flip the prediction\n      if(prediction === 1){\n        return(-1);\n      }\n      else if(prediction === -1){\n        return(1);\n      } else{\n        // this handles the validation case where our prediction is \"garbage_validation\"\n        return(prediction)\n      }\n    }\n  }\n\n  shuffle(array){\n    var new_array = [...array];;\n    let currentIndex = new_array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [new_array[currentIndex], new_array[randomIndex]] = [\n        new_array[randomIndex], new_array[currentIndex]];\n    }\n  \n    return new_array;\n  }\n  // function for randomizing the display of policy ids. Passed down to PairwiseComparison Component\n  randomizePolicyids(policy_ids, prediction){\n    const shuffled_ids = this.shuffle(policy_ids);\n    console.log(\"randomized policy_id\" , shuffled_ids);\n    const updatedPrediction = this.flipPrediction(policy_ids, shuffled_ids, prediction);\n    \n    console.log(\"flipped prediction\" , updatedPrediction);\n    this.pushBackPrediction(updatedPrediction);\n    this.updatePolicyIDs(shuffled_ids);\n  }\n\n\n  handleUnload(e){\n    // if they haven't gotten past the info form, don't save state when they navigate away\n    console.log(\"showEndPage\", this.state.showEndPage);\n    console.log(\"userInfo.age\", this.state.userInfo.age.length);\n    if((this.state.currentStep === 0 && this.state.userInfo.age.length === 0) || this.state.showEndPage){\n      this.removeStateFromLS();\n    } else {\n      this.writeStatetoLS();\n    }\n    \n  }\n\n  writeStatetoLS(){\n    ls.set('APE_state', JSON.stringify(this.state))\n  }\n\n  readStatefromLS(){\n    var loadedState = ls.get('APE_state');\n    if (!(loadedState === null)){\n      this.setState(JSON.parse(loadedState));\n    } \n    \n  }\n\n  removeStateFromLS(){\n    // console.log(this.state.userInfo.age.length);\n    // console.log(\"removing state\")\n    ls.remove('APE_state');\n  }\n\n  incrementStep(){\n    this.setState({\n      currentStep : this.state.currentStep + 1\n    }, function(){ console.log(this.state.currentStep)})\n    if(this.state.currentStep === 0){\n      this.toggleShowSteps();\n    }\n  }\n  \n  updatePolicyIDs(ids){\n    this.setState({\n      policy_ids : ids\n    })\n  }\n\n  updateStage(){\n    var stage = this.state.currentStep <= this.numExploration ? this.state.algorithmStage : \"validation\"\n    this.setState({\n      algorithmStage : stage\n    })\n  }\n\n  pushBackPolicyShown(){\n    this.state.policiesShown.push(this.state.policy_ids);\n  }\n\n  pushBackStage(){\n    this.state.prevStages.push(this.state.algorithmStage);\n  }\n\n  pushBackPrediction(prediction){\n    this.state.predictions.push(prediction);\n    console.log(this.state.predictions);\n  }\n  pushBackChoices(selected){\n    this.state.userChoices.push(selected);\n    console.log(this.state.userChoices);\n  }\n\n  toggleShowSteps(){\n    this.setState({ showSteps: !this.state.showSteps})\n  }\n\n  toggleLoading(state){\n    this.setState({ loading: state})\n  }\n\n  toggleStartPage(){\n    this.setState({ showStartPage: !this.state.showStartPage})\n  }\n\n  toggleEndPage(){\n    this.setState({ showEndPage: !this.state.showEndPage})\n  }\n\n  toggleWrapUp(){\n    this.setState({ wrapup: !this.state.wrapup})\n  }\n\n  toggleUserInfoForm(){\n    this.setState({ showUserInfoForm: !this.state.showUserInfoForm})\n  }\n\n  updateUserInfo(data){\n    // remove form errors messages from the object\n    var toUpdate = _.omit(data, [\"defaultMessage\", \"selectFieldMessage\",\n     \"usernameFieldMessage\", \"healthcareroleFieldMessage\"])\n\n    toUpdate = Object.keys(toUpdate).reduce((obj,key) => {\n          if(_.isObject(toUpdate[key])){\n            obj[key] = toUpdate[key]['value']\n          } else{\n                obj[key] = toUpdate[key];\n          }\n        return obj;\n      }, {})\n    this.setState({\n      userInfo: toUpdate\n    }, \n    function(){console.log(this.state.userInfo)}\n    )\n  }\n\n  postFinalData(){\n    // TO-DO: add time start and time end?\n    const toPostData = JSON.stringify({\n      uuid: this.uuid,\n      ip: this.state.ip,\n      userChoices : this.state.userChoices,\n      userInfo : this.state.userInfo\n    })\n  axios.post(`${SERVER_URL}/user_data`, toPostData,\n      {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    )\n    // console.log(response)\n    .then((response) =>{\n      console.log(response)\n    })\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.handleUnload);\n  }\n  \n  async componentDidMount() {\n    // add listener for when user leaves the page\n    window.addEventListener('beforeunload', this.handleUnload);\n    // check if state is in local storage\n    var loadableState = ls.get('APE_state');\n    if(loadableState){\n      // check that there is actually any info in the state object\n      var state_info = JSON.parse(loadableState);\n      console.log(state_info)\n      if(state_info['currentStep'] > 0 && state_info['userInfo']['age'].length > 0){\n        this.setState({\n          showResumeButton: true\n        })\n      }\n      // if we already have data in local storage, don't make requests\n    } else {\n      \n      // TO-DO: catch error here and use default value of 0.0.0.0\n      try{\n        const loc_response = await fetch('https://geolocation-db.com/json/');\n        const data = await loc_response.json();\n        this.setState({ ip: data.IPv4 })\n      } catch(err){\n        console.log(\"Got error trying to get IP address\", err)\n        this.setState({ ip: \"0.0.0.0\" })\n      }\n      \n      \n      // parse query string info\n      const urlSearchParams = new URLSearchParams(window.location.search);\n      const params = Object.fromEntries(urlSearchParams.entries());\n      // only want param mturk\n      if(params['mturk']){\n        this.mturk = true;\n      }\n\n      // TO-DO: pass which stream a user is in\n      const prevChoices = JSON.stringify({\n        policiesShown: [],\n        userChoices : [],\n        prevStages: [this.state.algorithmStage]\n      })\n      const response = await axios.post(`${SERVER_URL}/next_query/`, prevChoices,{\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n      // const response = await axios({\n      //   method: \"POST\",\n      //   url: `${SERVER_URL}/next_query/`,\n      //   data: prevChoices,\n      //   headers: {\n      //     'Content-Type': 'application/json'\n      //   },\n      // })\n      \n\n      this.updatePolicyIDs(response.data.policy_ids);\n      this.pushBackPrediction(response.data.prediction);\n      console.log(response);\n      console.log(\"policy ids shown after async request\", this.state.policiesShown);\n\n      // const csvData = await csv(policy_data_path)\n      // const cleanedData = await getPolicyData(csvData);\n      const datasetName = \"COVID\";\n      const policyDataResponse = await axios({\n        method: \"GET\",\n        url: `${SERVER_URL}/dataset?dataset=${datasetName}`\n      })\n      \n      this.setState({\n        policyData: policyDataResponse.data.data,\n        // policyData: cleanedData,\n        policyDataSet: datasetName\n      }, function(){\n        console.log(this.state.policyData);\n        console.log(this.state.policyDataSet);\n      })\n    }\n    \n    \n\n    \n    \n\n  }\n  render() {\n    return(\n      <React.Fragment>\n        <TopNavBar/>\n        <Container fluid={true} style={{marginTop : \"1rem\", marginBottom: \"10rem\"}}>\n          \n          <StartPage showStartPage={this.state.showStartPage}\n          toggleStartPage={this.toggleStartPage}\n          toggleUserInfoForm={this.toggleUserInfoForm}\n          readStatefromLS={this.readStatefromLS}\n          showResumeButton={this.state.showResumeButton}\n          />\n          <UserInfoForm showForm={this.state.showUserInfoForm}\n          toggleUserInfoForm={this.toggleUserInfoForm} \n          updateUserInfo={this.updateUserInfo}\n          incrementStep={this.incrementStep} \n          writeStatetoLS={this.writeStatetoLS}\n          />\n          {this.state.showSteps ? \n            <StepList \n              key={this.state.currentStep.toString()} // key necessary for ensuring re-render on state change\n              userChoices={this.state.userChoices}\n              policiesShown={this.state.policiesShown}\n              maxSteps={this.maxSteps}\n              policyData={this.state.policyData}\n              policyDataSet={this.state.policyDataSet}\n              policy_ids={this.state.policy_ids}\n              currentStep={this.state.currentStep}\n              loading={this.state.loading}\n              wrapup={this.state.wrapup}\n              incrementStep={this.incrementStep}\n              toggleLoading={this.toggleLoading}\n              toggleWrapUp={this.toggleWrapUp}\n              toggleEndPage={this.toggleEndPage}\n              updatePolicyIDs={this.updatePolicyIDs}\n              updateStage={this.updateStage}\n              pushBackPolicyShown={this.pushBackPolicyShown}\n              pushBackStage={this.pushBackStage}\n              pushBackPrediction={this.pushBackPrediction}\n              prevPredictions={this.state.predictions}\n              prevStages={this.state.prevStages}\n              postFinalData={this.postFinalData}\n              writeStatetoLS={this.writeStatetoLS}\n              removeStateFromLS={this.removeStateFromLS}\n              randomizePolicyids={this.randomizePolicyids}\n              flipPrediction={this.flipPrediction}\n              randomize={this.randomize}\n\n              userInfo={this.state.userInfo}\n              ip={this.state.ip}\n              uuid={this.uuid}\n\n            /> : \n            null\n          }\n          <EndPage showEndPage={this.state.showEndPage}/>\n        </Container>\n        \n        {/* <EndPage></EndPage> */}\n        {/* <BottomNavBar></BottomNavBar> */}\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n// import MasterForm from './Form'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    {/* <MasterForm /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const defaultMessage = 'Please fill out all required fields';\nconst selectFieldMessage = 'Please select one of the options';\nconst usernameFieldMessage = 'Please enter a Worker ID';\nconst healthcareroleFieldMessage = 'If you chose yes to the above question, please enter in your job title. Otherwise please enter in NA.';\n\nexports.defaultMessage = defaultMessage;\nexports.selectFieldMessage = selectFieldMessage;\nexports.usernameFieldMessage = usernameFieldMessage;\nexports.healthcareroleFieldMessage = healthcareroleFieldMessage;"],"sourceRoot":""}