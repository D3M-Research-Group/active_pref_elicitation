{"version":3,"sources":["StartPage.js","simplifiedFormSchema.js","Submit.js","Select.js","UserInfoForm.js","Loader.js","mockChoiceData.js","BarChart.js","PolicyDataBarChart.js","Card.js","ToggleButtons.js","NavBar.js","PolicyNumberDisplay.js","PolicyDataPlots.js","PolicyComparisonSection.js","PairwiseComparison.js","StepGenerator.js","COVID_and_LAHSA_datasets/COVID/UK_1360beds-25policies.csv","transformCsvFiles.js","TopNavBar.js","App.js","reportWebVitals.js","index.js","FormErrorMessages.js"],"names":["StartPage","props","nextPage","bind","this","toggleStartPage","toggleUserInfoForm","showStartPage","Fragment","Container","className","Button","color","size","type","onClick","React","Component","schema","properties","username","minLength","age","label","minimum","name","value","race_ethnicity","gender","marital_status","education","political","positive_family","positive_anyone","healthcare_yn","healthcare_role","required","Submit","loading","success","rest","disabled","defaultProps","Select","classNamePrefix","UserInfoForm","state","formData","defaultMessage","selectFieldMessage","usernameFieldMessage","healthcareroleFieldMessage","handleChange","handleSubmit","data","setState","updateUserInfo","setTimeout","incrementStep","showForm","onChange","onSubmit","Row","FormGroup","Label","style","width","Col","md","errorMessages","component","isClearable","newVal","handleFieldChange","options","placeholder","Loader","class","choiceData","cardData","title","description","graphData","BarChart","defaults","animation","PolicyDataBarChart","columnNums","plotOptions","responsive","scales","yAxes","ticks","beginAtZero","plugins","legend","display","createChartJsData","column_start","column_end","labels","slice","datasets","values","backgroundColor","borderColor","borderWidth","redraw","Card","children","SelectableCard","selected","SelectableTitleCard","length","lg","fluid","ToggleButtons","useState","setSelected","ToggleButtonGroup","exclusive","event","newSelected","onSelectChange","toggleDisabled","ToggleButton","BottomNavBar","sectionNames","submitDisabled","setSubmitedDisabled","Navbar","light","expand","fixed","paddingLeft","paddingRight","Nav","navbar","map","idx","NavItem","NavLink","href","toString","makeNavItem","id","submitChoice","UncontrolledTooltip","placement","target","hidden","PolicyNumberDisplay","Jumbotron","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","backgroundColors","borderColors","PolicyDataPlot","plotType","y","callback","index","toFixed","choosePlotType","dat","max","reduce","a","b","Math","console","log","labs","bg_colors","border_colors","push","grid","drawBorder","PolicyComparisonSection","sectionType","policyData","sectionNum","generatePlotColumn","marginBottom","PairwiseComparison","e","preventDefault","pushBackChoice","showError","cardContents","policy_ids","userChoices","stepNum","onListChanged","updateShowError","prepareCardData","next","sectionInfo","sectionName","sectionDescription","show","i","section","x","Step","currentStep","StepList","maxSteps","numSteps","Array","fill","element","elem","getPolicyData","csv","groups","nest","key","d","Parameter","entries","result","obj","Object","keys","Number","policy_id","TopNavBar","NavbarBrand","role","App","showUserInfoForm","showSteps","userInfo","uuid","uuidv4","toggleShowSteps","toUpdate","_","omit","policy_data_path","csvData","cleanedData","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","exports"],"mappings":"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NF,MAAO,+BACPG,MAAO,gCACT,CACED,KAAM,qEACNF,MAAO,qEACPG,MAAO,sEACT,CACED,KAAM,iCACNF,MAAO,iCACPG,MAAO,kCACT,CACED,KAAM,sCACNF,MAAO,sCACPG,MAAO,uCACT,CACED,KAAM,mBACNF,MAAO,mBACPG,MAAO,oBACT,CACED,KAAM,yBACNF,MAAO,yBACPG,MAAO,0BACT,CACED,KAAM,kBACNF,MAAO,kBACPG,MAAO,mBACT,CACED,KAAM,sBACNF,MAAO,sBACPG,MAAO,uBACT,CACED,KAAM,mBACNF,MAAO,mBACPG,MAAO,qBAGfA,MAAOqB,EAASjB,YAEpB,cAAC,IAAD,CACAuC,cAAe,CACXjC,SAAU,kBAAMW,EAASE,qBAE7BxB,KAAK,oBAKb,eAACsC,EAAA,EAAD,WACX,cAACC,EAAA,EAAD,CAAOC,MAAO,CAACC,MAAO,QAAtB,uDACA,eAACC,EAAA,EAAD,CAAKF,MAAO,CAACC,MAAO,QAASE,GAAG,IAAhC,UACmB,cAAC,IAAD,CACI1D,UAAU,GACV4D,UAAW3B,EACXlB,KAAK,YACL8C,aAAW,EACXX,SAAU,SAACY,EAAQC,GAAT,OAA+BA,EAAkB,YAAaD,IACxEE,QAAS,CACL,CACIjD,KAAM,eACNF,MAAO,eACPG,MAAO,gBACT,CACED,KAAM,aACNF,MAAO,aACPG,MAAO,cACT,CACED,KAAM,QACNF,MAAO,QACPG,MAAO,SACT,CACED,KAAM,cACNF,MAAO,cACPG,MAAO,eACT,CACED,KAAM,cACNF,MAAO,cACPG,MAAO,eACT,CACED,KAAM,aACNF,MAAO,aACPG,MAAO,cACT,CACED,KAAM,QACNF,MAAO,QACPG,MAAO,SACT,CACED,KAAM,uBACNF,MAAO,uBACPG,MAAO,yBAGfA,MAAOqB,EAAShB,YAEpB,cAAC,IAAD,CACAsC,cAAe,CACXjC,SAAU,kBAAMW,EAASE,qBAE7BxB,KAAK,oBAIb,eAACsC,EAAA,EAAD,WACX,cAACC,EAAA,EAAD,CAAOC,MAAO,CAACC,MAAO,QAAtB,0EACA,eAACC,EAAA,EAAD,CAAMF,MAAO,CAACC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","file":"static/js/main.8c4ef88f.chunk.js","sourcesContent":["import React from 'react';\nimport {\n\tCol,\n\tRow,\n    Container,\n    Button\n} from 'reactstrap';\n\nclass StartPage extends React.Component {\n    constructor(props){\n        super(props)\n        this.nextPage = this.nextPage.bind(this);\n    }\n\n    nextPage(){\n        // hide StartPage\n        this.props.toggleStartPage();\n        // show UserInfoForm\n        this.props.toggleUserInfoForm();\n    }\n\n    render(){\n        if(!this.props.showStartPage){\n            return null;\n        }\n\n        return(\n            \n            <React.Fragment>\n                <Container>\n                <h2>Help make a difference!</h2>\n                    <p className=\"lead\">The questionnaires are designed to learn your preferences by displaying outcomes\n                    of different policies and learning your choices. New policy outcomes are displayed\n                    after each choice you make. The <b>adaptive questionnaire</b> is tailored to ask\n                    questions based on your previous choices.\n                    You can start  the <b>Adaptive</b> questionnaire by clicking on the button below. Please take the survey <b>only once</b>. Once logged in, <b>please do not log out and log back in again</b>. For the survey to be accepted please take it only once and complete it without logging out and back in.\n                    <br></br>\n                    <br></br>\n                    <br></br>\n                    What happens if there isn’t enough medical equipment available to treat every person who gets sick with COVID-19?\n                    Who gets an ICU bed? Who gets a ventilator? Our goal is meant to find a set of guidelines to help healthcare providers\n                    decide which patients would get a bed, ventilator, or receive other lifesaving treatments in a critical care unit in an\n                    <b> event where there are more patients than necessary resources. </b>\n\n                    <br></br>\n                    <br></br>\n                    <br></br>\n                    Note: Once the policy selection button is clicked you may not change your response.\n                </p>\n                {/* Center this */}\n                <div>\n                    <br></br>\n                    <br></br>\n                    <Button\n                        color='primary'\n                        size=\"lg\"\n                        type=\"submit\"\n                        onClick={this.nextPage}\n                    > Start Adaptive Questionnaire\n                    </Button>\n                </div>\n                </Container>\n            </React.Fragment>\n            \n            \n        )\n    }\n}\nexport default StartPage;","const schema = {\n    type: \"object\",\n    properties: {\n        username: {\n            type: 'string', minLength: 1\n        },\n      age: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n      race_ethnicity: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n      gender: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n      marital_status: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n      education: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n      political: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n      positive_family: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n      positive_anyone: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n      healthcare_yn: {\n        type: 'object',\n\t\t\tproperties: {\n\t\t\t\tlabel: { type: 'string', minimum: 1 },\n\t\t\t\tname: { type: 'string', minimum: 1 },\n\t\t\t\tvalue: { type: 'string', minimum: 1 },\n\t\t\t}\n      },\n\n      healthcare_role: {\n        type: 'string', minLength: 1\n      }\n\n    },\n    required: [\"username\", \"age\", \"race_ethnicity\", \"gender\", \"marital_status\", \"education\", \"political\",\n    \"positive_family\", \"positive_anyone\",\"healthcare_yn\", \"healthcare_role\"]\n}\nexport default schema;","import PropTypes from 'prop-types';\nimport React from 'react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { Button } from 'reactstrap';\n\nconst Submit = (props) => {\n\tconst {\n\t\tloading,\n\t\tsuccess,\n\t\t...rest\n\t} = props;\n\n\treturn (\n\t\t<Button\n\t\t\tcolor={success ? 'success' : 'primary'}\n\t\t\tdisabled={loading || success}\n\t\t\tsize=\"xl\"\n\t\t\ttype=\"submit\"\n\t\t\t{...rest}\n\t\t>\n\t\t\t{\n\t\t\t\t// eslint-disable-next-line no-nested-ternary\n\t\t\t\tloading\n\t\t\t\t\t? 'Loading'\n\t\t\t\t\t: success\n\t\t\t\t\t\t? 'Success'\n\t\t\t\t\t\t: 'Submit'\n\n\t\t\t}\n\t\t</Button>\n\t);\n};\n\nSubmit.propTypes = {\n\tloading: PropTypes.bool,\n\tsuccess: PropTypes.bool,\n};\n\nSubmit.defaultProps = {\n\tloading: false,\n\tsuccess: false,\n};\n\nexport default Submit;","import React from 'react';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport ReactSelect from 'react-select';\n\nimport './Select.scss';\n\nconst Select = props => (\n\t<ReactSelect\n\t\tclassNamePrefix=\"Jvf_Select\"\n\t\t{...props}\n\t/>\n);\n\nexport default Select;","import React from 'react';\nimport { Field, FieldError, Form } from 'react-jsonschema-form-validation';\nimport {\n\tCol,\n\tFormGroup,\n\tLabel,\n\tRow,\n    Container\n} from 'reactstrap';\n\nimport { defaultMessage, \n    selectFieldMessage,\n    usernameFieldMessage,\n    healthcareroleFieldMessage } from './FormErrorMessages';\n\nimport './Field.scss';\nimport './FieldError.scss';\nimport schema from './simplifiedFormSchema';\nimport Submit from './Submit';\nimport Select from './Select';\nimport './UserInfoForm';\n\n\nclass UserInfoForm extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            formData: {\n                username: '',\n                age: '',\n                race_ethnicity: '',\n                gender: '',\n                marital_status: '',\n                education: '',\n                political: '',\n                positive_family: '',\n                positive_anyone: '',\n                healthcare_yn: '',\n                healthcare_role: '',\n                defaultMessage, selectFieldMessage, usernameFieldMessage, healthcareroleFieldMessage\n            },\n            loading: false,\n\t\t\tsuccess: false,\n        }\n        this.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n    };\n    handleChange(data) {\n\t\tthis.setState({\n\t\t\tformData: data,\n\t\t\tsuccess: false,\n\t\t});\n\t}\n\n    \n\n\thandleSubmit() {\n\t\tthis.setState({ loading: true });\n        // lift up form data to App component \n        this.props.updateUserInfo(this.state.formData);\n\t\tsetTimeout(() => {\n\t\t\tthis.setState({ loading: false, success: true });\n            \n\t\t}, 1000);\n        this.props.toggleUserInfoForm();\n        this.props.incrementStep();\n        \n\t}\n\n\trender() {\n\n        if(!this.props.showForm){\n            return null;\n        }\n\n        const {\n\t\t\tformData,\n\t\t\tloading,\n\t\t\tsuccess,\n\t\t} = this.state;  \n\n        return(\n            <Container>\n                \n            <Form\n\t\t\t\tdata={formData}\n\t\t\t\tonChange={this.handleChange}\n\t\t\t\tonSubmit={this.handleSubmit}\n\t\t\t\tschema={schema}\n\t\t\t>\n                <Row className=\"mb-4\">\n                <FormGroup>\n                    {/* MAKE TEXT INPUT IN-LINE */}\n                    <Label style={{width: \"100%\"}} >Worker ID (Please use the MTurk Worker ID that we use to verify payment)</Label>\n                    <Col  style={{width: \"100%\"}} md=\"4\">\n                        <Field\n                            name=\"username\"\n                            value={formData.username}\n                            type=\"input\"\n                        />\n                        <FieldError \n                        errorMessages={{\n                            required: () => formData.usernameFieldMessage\n                        }}\n                        name=\"username\" />\n                    </Col>\n                    \n                </FormGroup>\n                <FormGroup>\n                <Label style={{width: \"100%\"}}>What is your age group?</Label>\n                    <Col style={{width: \"100%\"}} md=\"4\">\n                        <Field\n                            className=\"\"\n                            component={Select}\n                            name=\"age\"\n                            isClearable\n                            onChange={(newVal, handleFieldChange) => handleFieldChange('age', newVal)}\n                            options={[\n                                {\n                                    name: \"18-39\",\n                                    label: \"18-39\",\n                                    value: \"18-39\",\n                                },{\n                                    name: \"40-49\",\n                                    label: \"40-49\",\n                                    value: \"40-49\",\n                                },{\n                                    name: \"50-59\",\n                                    label: \"50-59\",\n                                    value: \"50-59\",\n                                },{\n                                    name: \"60-69\",\n                                    label: \"60-69\",\n                                    value: \"60-69\",\n                                },{\n                                    name: \"70-79\",\n                                    label: \"70-79\",\n                                    value: \"70-79\",\n                                },{\n                                    name: \"80+\",\n                                    label: \"80+\",\n                                    value: \"80+\",\n                                }\n                            ]}\n                            value={formData.age}\n                        />\n                        <FieldError \n                        errorMessages={{\n                            required: () => formData.selectFieldMessage\n                        }}\n                        name=\"age\" />\n\t\t\t\t</Col>\t\n\t\t\t\t\t\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n\t\t\t\t\t<Label style={{width: \"100%\"}}>What is your race/ethnicity?</Label>\n                    <Col style={{width: \"100%\"}} md=\"4\">\n                    <Field\n\t\t\t\t\t\tclassName=\"\"\n\t\t\t\t\t\tcomponent={Select}\n\t\t\t\t\t\tname=\"race_ethnicity\"\n\t\t\t\t\t\tisClearable\n\t\t\t\t\t\tonChange={(newVal, handleFieldChange) => handleFieldChange('race_ethnicity', newVal)}\n\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tname: \"American Indian or Alaska Native\",\n\t\t\t\t\t\t\t\tlabel: \"American Indian or Alaska Native\",\n\t\t\t\t\t\t\t\tvalue: \"American Indian or Alaska Native\",\n\t\t\t\t\t\t\t},{\n\t\t\t\t\t\t\t\tname: \"Asian\",\n\t\t\t\t\t\t\t\tlabel: \"Asian\",\n\t\t\t\t\t\t\t\tvalue: \"Asian\",\n\t\t\t\t\t\t\t},{\n\t\t\t\t\t\t\t\tname: \"Black or African American\",\n\t\t\t\t\t\t\t\tlabel: \"Black or African American\",\n\t\t\t\t\t\t\t\tvalue: \"Black or African American\",\n\t\t\t\t\t\t\t},{\n\t\t\t\t\t\t\t\tname: \"Hispanic or Latino\",\n\t\t\t\t\t\t\t\tlabel: \"Hispanic or Latino\",\n\t\t\t\t\t\t\t\tvalue: \"Hispanic or Latino\",\n\t\t\t\t\t\t\t},{\n\t\t\t\t\t\t\t\tname: \"Multiracial\",\n\t\t\t\t\t\t\t\tlabel: \"Multiracial\",\n\t\t\t\t\t\t\t\tvalue: \"Multiracial\",\n\t\t\t\t\t\t\t},{\n\t\t\t\t\t\t\t\tname: \"Native Hawaiian or Other Pacific Islander\",\n\t\t\t\t\t\t\t\tlabel: \"Native Hawaiian or Other Pacific Islander\",\n\t\t\t\t\t\t\t\tvalue: \"Native Hawaiian or Other Pacific Islander\",\n\t\t\t\t\t\t\t},{\n\t\t\t\t\t\t\t\tname: \"White\",\n\t\t\t\t\t\t\t\tlabel: \"White\",\n\t\t\t\t\t\t\t\tvalue: \"White\",\n\t\t\t\t\t\t\t},{\n\t\t\t\t\t\t\t\tname: \"Prefer not to Answer\",\n\t\t\t\t\t\t\t\tlabel: \"Prefer not to Answer\",\n\t\t\t\t\t\t\t\tvalue: \"Prefer not to Answer\",\n\t\t\t\t\t\t\t}\n                            \n\t\t\t\t\t\t]}\n\t\t\t\t\t\tvalue={formData.race_ethnicity}\n\t\t\t\t\t/>\n\t\t\t\t\t<FieldError \n                    errorMessages={{\n                        required: () => formData.selectFieldMessage\n                    }}\n                    name=\"race_ethnicity\" />\n                    </Col>\n\t\t\t\t\t\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n\t\t\t\t\t<Label style={{width: \"100%\"}}>What is your gender?</Label>\n                    < Col style={{width: \"100%\"}} md=\"4\"> \n                        <Field\n                            className=\"\"\n                            component={Select}\n                            name=\"gender\"\n                            isClearable\n                            onChange={(newVal, handleFieldChange) => handleFieldChange('gender', newVal)}\n                            options={[\n                                {\n                                    name: \"Female\",\n                                    label: \"Female\",\n                                    value: \"Female\",\n                                },{\n                                    name: \"Male\",\n                                    label: \"Male\",\n                                    value: \"Male\",\n                                },{\n                                    name: \"Other\",\n                                    label: \"Other\",\n                                    value: \"Other\",\n                                },{\n                                    name: \"Prefer not to answer\",\n                                    label: \"Prefer not to answer\",\n                                    value: \"Prefer not to answer\",\n                                }\n                            ]}\n                            value={formData.gender}\n                        />\n                        <FieldError\n                        errorMessages={{\n                            required: () => formData.selectFieldMessage\n                        }}\n                        name=\"gender\" />   \n                    </Col>\n\t\t\t\t\t\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n\t\t\t\t\t<Label style={{width: \"100%\"}}>What is your marital status?</Label>\n                    <Col style={{width: \"100%\"}} md=\"4\">\n                        <Field\n                            className=\"\"\n                            component={Select}\n                            name=\"marital_status\"\n                            isClearable\n                            onChange={(newVal, handleFieldChange) => handleFieldChange('marital_status', newVal)}\n                            options={[\n                                {\n                                    name: \"Single (Never Married)\",\n                                    label: \"Single (Never Married)\",\n                                    value: \"Single (Never Married)\",\n                                },{\n                                    name: \"Married\",\n                                    label: \"Married\",\n                                    value: \"Married\",\n                                },{\n                                    name: \"Divorced\",\n                                    label: \"Divorced\",\n                                    value: \"Divorced\",\n                                },{\n                                    name: \"Widowed\",\n                                    label: \"Widowed\",\n                                    value: \"Widowed\",\n                                },{\n                                    name: \"Other\",\n                                    label: \"Other\",\n                                    value: \"Other\",\n                                },{\n                                    name: \"Prefer not to answer\",\n                                    label: \"Prefer not to answer\",\n                                    value: \"Prefer not to answer\",\n                                }\n                            ]}\n                            value={formData.marital_status}\n                        />\n                        <FieldError\n                        errorMessages={{\n                            required: () => formData.selectFieldMessage\n                        }}\n                        name=\"marital_status\" />\n                    </Col>\n\t\t\t\t\t\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n\t\t\t\t\t<Label style={{width: \"100%\"}}>What is the highest degree or level of school you have completed?</Label>\n                    <Col style={{width: \"100%\"}} md=\"4\">\n                        <Field\n                            className=\"\"\n                            component={Select}\n                            name=\"education\"\n                            isClearable\n                            onChange={(newVal, handleFieldChange) => handleFieldChange('education', newVal)}\n                            options={[\n                                {\n                                    name: \"No schooling completed\",\n                                    label: \"No schooling completed\",\n                                    value: \"No schooling completed\",\n                                },{\n                                    name: \"Nursery school to 8th grade\",\n                                    label: \"Nursery school to 8th grade\",\n                                    value: \"Nursery school to 8th grade\",\n                                },{\n                                    name: \"Some high school, no diploma\",\n                                    label: \"Some high school, no diploma\",\n                                    value: \"Some high school, no diploma\",\n                                },{\n                                    name: \"High school graduate, diploma or the equivalent (for example: GED)\",\n                                    label: \"High school graduate, diploma or the equivalent (for example: GED)\",\n                                    value: \"High school graduate, diploma or the equivalent (for example: GED)\",\n                                },{\n                                    name: \"Some college credit, no degree\",\n                                    label: \"Some college credit, no degree\",\n                                    value: \"Some college credit, no degree\",\n                                },{\n                                    name: \"Trade/technical/vocational training\",\n                                    label: \"Trade/technical/vocational training\",\n                                    value: \"Trade/technical/vocational training\",\n                                },{\n                                    name: \"Associate degree\",\n                                    label: \"Associate degree\",\n                                    value: \"Associate degree\",\n                                },{\n                                    name: \"Bachelor’s degree\",\n                                    label: \"Bachelor’s degree\",\n                                    value: \"Bachelor’s degree\",\n                                },{\n                                    name: \"Master's degree\",\n                                    label: \"Master's degree\",\n                                    value: \"Master's degree\",\n                                },{\n                                    name: \"Professional degree\",\n                                    label: \"Professional degree\",\n                                    value: \"Professional degree\",\n                                },{\n                                    name: \"Doctorate degree\",\n                                    label: \"Doctorate degree\",\n                                    value: \"Doctorate degree\",\n                                }\n                            ]}\n                            value={formData.education}\n                        />\n                        <FieldError\n                        errorMessages={{\n                            required: () => formData.selectFieldMessage\n                        }}\n                        name=\"education\" />\n                    </Col>\n\t\t\t\t\t\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n\t\t\t\t\t<Label style={{width: \"100%\"}}>What is your political party affiliation?</Label>\n\t\t\t\t\t<Col style={{width: \"100%\"}} md=\"4\">\n                        <Field\n                            className=\"\"\n                            component={Select}\n                            name=\"political\"\n                            isClearable\n                            onChange={(newVal, handleFieldChange) => handleFieldChange('political', newVal)}\n                            options={[\n                                {\n                                    name: \"Constitution\",\n                                    label: \"Constitution\",\n                                    value: \"Constitution\",\n                                },{\n                                    name: \"Democratic\",\n                                    label: \"Democratic\",\n                                    value: \"Democratic\",\n                                },{\n                                    name: \"Green\",\n                                    label: \"Green\",\n                                    value: \"Green\",\n                                },{\n                                    name: \"Independent\",\n                                    label: \"Independent\",\n                                    value: \"Independent\",\n                                },{\n                                    name: \"Libertarian\",\n                                    label: \"Libertarian\",\n                                    value: \"Libertarian\",\n                                },{\n                                    name: \"Republican\",\n                                    label: \"Republican\",\n                                    value: \"Republican\",\n                                },{\n                                    name: \"Other\",\n                                    label: \"Other\",\n                                    value: \"Other\",\n                                },{\n                                    name: \"Prefer not to Answer\",\n                                    label: \"Prefer not to Answer\",\n                                    value: \"Prefer not to Answer\",\n                                }\n                            ]}\n                            value={formData.political}\n                        />\n                        <FieldError\n                        errorMessages={{\n                            required: () => formData.selectFieldMessage\n                        }}\n                        name=\"political\" />\n                    </Col>\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n\t\t\t\t\t<Label style={{width: \"100%\"}}>Do you have family members who tested positive for COVID-19?</Label>\n\t\t\t\t\t<Col  style={{width: \"100%\"}} md=\"4\">\n                        <Field\n                            className=\"\"\n                            component={Select}\n                            name=\"positive_family\"\n                            isClearable\n                            onChange={(newVal, handleFieldChange) => handleFieldChange('positive_family', newVal)}\n                            options={[\n                                {\n                                    name: \"Yes\",\n                                    label: \"Yes\",\n                                    value: \"Yes\",\n                                },{\n                                    name: \"No\",\n                                    label: \"No\",\n                                    value: \"No\",\n                                },{\n                                    name: \"Unsure\",\n                                    label: \"Unsure\",\n                                    value: \"Unsure\",\n                                }\n                            ]}\n                            value={formData.positive_family}\n                        />\n                        <FieldError\n                        errorMessages={{\n                            required: () => formData.selectFieldMessage\n                        }}\n                        name=\"positive_family\" />\n                    </Col>\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n\t\t\t\t\t<Label style={{width: \"100%\"}} >Do you know anyone (other than family members) who tested positive for COVID-19?</Label>\n                    <Col style={{width: \"100%\"}} md=\"4\">\n                        <Field\n                            className=\"\"\n                            component={Select}\n                            name=\"positive_anyone\"\n                            isClearable\n                            onChange={(newVal, handleFieldChange) => handleFieldChange('positive_anyone', newVal)}\n                            options={[\n                                {\n                                    name: \"Yes\",\n                                    label: \"Yes\",\n                                    value: \"Yes\",\n                                },{\n                                    name: \"No\",\n                                    label: \"No\",\n                                    value: \"No\",\n                                },{\n                                    name: \"Unsure\",\n                                    label: \"Unsure\",\n                                    value: \"Unsure\",\n                                }\n                            ]}\n                            value={formData.positive_anyone}\n                        />\n                        <FieldError\n                        errorMessages={{\n                            required: () => formData.selectFieldMessage\n                        }}\n                        name=\"positive_anyone\" />\n                    </Col>\n\t\t\t\t\t\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n\t\t\t\t\t<Label style={{width: \"100%\"}}>Do you work in health care?</Label>\n                    <Col  style={{width: \"100%\"}} md=\"4\">\n                        <Field\n                            className=\"\"\n                            component={Select}\n                            name=\"healthcare_yn\"\n                            isClearable\n                            onChange={(newVal, handleFieldChange) => handleFieldChange('healthcare_yn', newVal)}\n                            options={[\n                                {\n                                    name: \"Yes\",\n                                    label: \"Yes\",\n                                    value: \"Yes\",\n                                },{\n                                    name: \"No\",\n                                    label: \"No\",\n                                    value: \"No\",\n                                }\n                            ]}\n                            value={formData.healthcare_yn}\n                        />\n                        <FieldError\n                        errorMessages={{\n                            required: () => formData.selectFieldMessage\n                        }}\n                        name=\"healthcare_yn\" />\n                    </Col>\n\t\t\t\t\t\n\t\t\t\t</FormGroup>\n\n                <FormGroup>\n                    <Label style={{width: \"100%\"}}>If you answered yes to the above question, what is your role? Otherwise enter \"NA\".</Label>\n                    <Col style={{width: \"100%\"}} md=\"4\" >\n                        <Field className=\"\"\n                            name=\"healthcare_role\"\n                            value={formData.healthcare_role}\n                            type=\"input\"\n                            placeholder=\"NA\"\n                        />\n                        <FieldError \n                        errorMessages={{\n                            required: () => formData.healthcareroleFieldMessage\n                        }}\n                        name=\"healthcare_role\" />\n                    </Col>\n\n                </FormGroup>\n                </Row>\n                <Row className=\"mb-4\">\n\t\t\t\t\t<Col md=\"10\" className=\"\">\n\t\t\t\t\t\t<Submit loading={loading} success={success} />\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n            </Form>\n            </Container>\n        );\n    }\n}\n\nexport default UserInfoForm;","import './Loader.scss';\n\n\nconst Loader = () => (\n  <div class=\"loading\">\n    <div></div>\n    <div></div>\n    <div></div>\n  </div>\n);\n\nexport default Loader;","const choiceData = [\n  {\n  cardData: [{\n    title: \"A Step 1\",\n    description: \"A\",\n    graphData: []\n  },{\n    title: \"B\",\n    description: \"B\",\n    graphData: []\n  }]\n},\n{\n  cardData: [{\n    title: \"A Step 2\",\n    description: \"A\",\n    graphData: []\n  },{\n    title: \"B\",\n    description: \"B\",\n    graphData: []\n  }]\n},\n{\n  cardData: [{\n    title: \"A Step 3\",\n    description: \"A\",\n    graphData: []\n  },{\n    title: \"B\",\n    description: \"B\",\n    graphData: []\n  }]\n},\n{\n  cardData: [{\n    title: \"A\",\n    description: \"A\",\n    graphData: []\n  },{\n    title: \"B\",\n    description: \"B\",\n    graphData: []\n  }]\n},\n{\n  cardData: [{\n    title: \"A\",\n    description: \"A\",\n    graphData: []\n  },{\n    title: \"B\",\n    description: \"B\",\n    graphData: []\n  }]\n},\n{\n  cardData: [{\n    title: \"A\",\n    description: \"A\",\n    graphData: []\n  },{\n    title: \"B\",\n    description: \"B\",\n    graphData: []\n  }]\n},\n{\n  cardData: [{\n    title: \"A\",\n    description: \"A\",\n    graphData: []\n  },{\n    title: \"B\",\n    description: \"B\",\n    graphData: []\n  }]\n},\n{\n  cardData: [{\n    title: \"A\",\n    description: \"A\",\n    graphData: []\n  },{\n    title: \"B\",\n    description: \"B\",\n    graphData: []\n  }]\n},\n{\n  cardData: [{\n    title: \"A\",\n    description: \"A\",\n    graphData: []\n  },{\n    title: \"B\",\n    description: \"B\",\n    graphData: []\n  }]\n},\n{\n  cardData: [{\n    title: \"A\",\n    description: \"A\",\n    graphData: []\n  },{\n    title: \"B\",\n    description: \"B\",\n    graphData: []\n  }]\n},\n{\n  cardData: [{\n    title: \"A\",\n    description: \"A\",\n    graphData: []\n  },{\n    title: \"B\",\n    description: \"B\",\n    graphData: []\n  }]\n},\n{\n  cardData: [{\n    title: \"A\",\n    description: \"A\",\n    graphData: []\n  },{\n    title: \"B\",\n    description: \"B\",\n    graphData: []\n  }]\n},\n{\n  cardData: [{\n    title: \"A\",\n    description: \"A\",\n    graphData: []\n  },{\n    title: \"B\",\n    description: \"B\",\n    graphData: []\n  }]\n}\n]\n\nexport default choiceData;\n\n// const choiceData = [\n//     {\n//     query_title : \"Pick a team\",\n//     data: [{\n//       title: \"FC Barcelona\",\n//       description: \"Spain\",\n//       data: this.graphData\n//     },{\n//       title: \"Bayern Munich\",\n//       description: \"Germany\",\n//       data: this.graphData\n//     },{\n//       title: \"Indifferent 🤷‍♀️ \",\n//       description: \"I don't like either option more than the other\",\n//       data: []\n//     }]\n//   },\n//   {\n//     query_title : \"Pick a company\",\n//     data: [{\n//       title: \"Apple\",\n//       description: \"Cupertino, CA\",\n//       data: this.graphData\n//     },{\n//         title: \"Microsoft\",\n//         description: \"Redmond, WA\",\n//         data: this.graphData\n//     },{\n//       title: \"Indifferent 🤷‍♀️ \", \n//       description: \"I don't like either option more than the other\",\n//       data: []\n//     }]   \n//   },\n//   {\n//     query_title : \"Pick a fruit\",\n//     data: [\n//       {\n//         title: \"Apples\",\n//           description: \"some text\",\n//           data: this.graphData\n//       },{\n//           title: \"Oranges\",\n//           description: \"Cara cara are the best\",\n//           data: this.graphData\n//       },{\n//         title: \"Indifferent 🤷‍♀️ \", \n//         description: \"I don't like either option more than the other\",\n//         data: []\n//       }\n//     ]\n\n//   }\n// ]","import { useD3 } from './hooks/useD3';\n\nimport React from 'react';\n\nimport * as d3 from 'd3';\n\nconst height = 500;\nconst width = 500;\n\nfunction BarChart({ data }) {\n\n  const ref = useD3(\n\n    (svg) => {\n\n      const margin = { top: 20, right: 30, bottom: 30, left: 40 };\n\n\n      const x = d3\n\n        .scaleBand()\n\n        .domain(data.map((d) => d.year))\n\n        .rangeRound([margin.left, width - margin.right])\n\n        .padding(0.1);\n\n\n      const y1 = d3\n\n        .scaleLinear()\n\n        .domain([0, d3.max(data, (d) => d.sales)])\n\n        .rangeRound([height - margin.bottom, margin.top]);\n\n\n      const xAxis = (g) =>\n\n        g.attr(\"transform\", `translate(0,${height - margin.bottom})`).call(\n\n          d3\n\n            .axisBottom(x)\n\n            .tickValues(\n\n              d3\n\n                .ticks(...d3.extent(x.domain()), width / 40)\n\n                .filter((v) => x(v) !== undefined)\n\n            )\n\n            .tickSizeOuter(0)\n\n        );\n\n\n      const y1Axis = (g) =>\n\n        g\n\n          .attr(\"transform\", `translate(${margin.left},0)`)\n\n          .style(\"color\", \"steelblue\")\n\n          .call(d3.axisLeft(y1).ticks(null, \"s\"))\n\n          .call((g) => g.select(\".domain\").remove())\n\n          .call((g) =>\n\n            g\n\n              .append(\"text\")\n\n              .attr(\"x\", -margin.left)\n\n              .attr(\"y\", 10)\n\n              .attr(\"fill\", \"currentColor\")\n\n              .attr(\"text-anchor\", \"start\")\n\n              .text(data.y1)\n\n          );\n\n\n      svg.select(\".x-axis\").call(xAxis);\n\n      svg.select(\".y-axis\").call(y1Axis);\n\n\n      svg\n\n        .select(\".plot-area\")\n\n        .attr(\"fill\", \"steelblue\")\n\n        .selectAll(\".bar\")\n\n        .data(data)\n\n        .join(\"rect\")\n\n        .attr(\"class\", \"bar\")\n\n        .attr(\"x\", (d) => x(d.year))\n\n        .attr(\"width\", x.bandwidth())\n\n        .attr(\"y\", (d) => y1(d.sales))\n\n        .attr(\"height\", (d) => y1(0) - y1(d.sales));\n\n    },\n\n    [data.length]\n\n  );\n  \n  if(data.length === 0){\n    return null\n  }\n  return (\n\n    <svg\n\n      ref={ref}\n\n      viewBox={`0 0 ${height} ${width}`}\n\n      style={{\n\n        height: \"100%\",\n\n        width: \"100%\",\n\n        marginRight: \"0px\",\n\n        marginLeft: \"0px\",\n\n      }}\n\n    >\n\n      <g className=\"plot-area\" />\n\n      <g className=\"x-axis\" />\n\n      <g className=\"y-axis\" />\n\n    </svg>\n\n  );\n\n}\n\n\nexport default BarChart;","import React from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { defaults } from 'react-chartjs-2';\n\n// Disable animating charts by default.\ndefaults.animation = false;\n\nclass PolicyDataBarChart extends React.Component {\n    constructor(props){\n        super(props);\n        this.data = this.props.data;\n        this.columnNums= this.props.columnNums; //start and end columns\n        this.plotOptions = {\n            responsive: true,\n            scales: {\n              yAxes: [\n                {\n                  ticks: {\n                    beginAtZero: true,\n                  },\n                },\n              ],\n            },\n            plugins: {\n                legend: {\n                    display: false\n                }\n            }\n        };\n        this.createChartJsData = this.createChartJsData.bind(this);\n    }\n\n\n    createChartJsData(data, column_start, column_end){\n        // need data in the form\n        // const data = {\n        //     labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n        //     datasets: [\n        //       {\n        //         label: '# of Votes',\n        //         data: [12, 19, 3, 5, 2, 3],\n        //         backgroundColor: [\n        //           'rgba(255, 99, 132, 0.2)',\n        //           'rgba(54, 162, 235, 0.2)',\n        //           'rgba(255, 206, 86, 0.2)',\n        //           'rgba(75, 192, 192, 0.2)',\n        //           'rgba(153, 102, 255, 0.2)',\n        //           'rgba(255, 159, 64, 0.2)',\n        //         ],\n        //         borderColor: [\n        //           'rgba(255, 99, 132, 1)',\n        //           'rgba(54, 162, 235, 1)',\n        //           'rgba(255, 206, 86, 1)',\n        //           'rgba(75, 192, 192, 1)',\n        //           'rgba(153, 102, 255, 1)',\n        //           'rgba(255, 159, 64, 1)',\n        //         ],\n        //         borderWidth: 1,\n        //       },\n        //     ],\n        //   };\n        const chartData = {\n            labels: data.labels.slice(column_start,column_end+1),\n            datasets: [\n                {\n                    data: data.values.slice(column_start,column_end+1),\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 159, 64, 0.2)',\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(255, 159, 64, 1)',\n                    ],\n                    borderWidth: 1,\n                }\n            ]\n        }\n        // console.log(\"chartData: \", chartData)\n        return chartData;\n    }\n\n    render() {\n        return(\n            <Bar data={this.createChartJsData(this.data, this.columnNums[0], this.columnNums[1])}\n            options={this.plotOptions} redraw={false}\n            />\n        )\n    }\n}\n\nexport default PolicyDataBarChart;","import React from 'react';\nimport BarChart from './BarChart';\nimport PolicyDataBarChart from './PolicyDataBarChart';\nimport './Card.scss'\n\nimport {\n\tCol,\n  Container\n} from 'reactstrap';\n\nclass Card extends React.Component {\n    \n    render() {\n      return (<div className=\"card\">{this.props.children}</div>)\n    }\n  }\n  \n  class SelectableCard extends React.Component {\n  \n    render() {\n      var isSelected = this.props.selected ? \"selected\" : \"\";\n      var className = \"selectable \" + isSelected;\n      return (\n        <Card>\n          <div className={className} onClick={this.props.onClick}>\n            {this.props.children}\n            <div className=\"check\"><span className=\"checkmark\">✔</span></div>\n          </div>\n        </Card>\n      );\n    }\n  }\n  \n  class SelectableTitleCard extends React.Component {\n  \n    render() {\n      var {\n        title,\n        description,\n        selected,\n        data\n      } = this.props;\n      // console.log(\"card data\", data);\n      // console.log(\"policy_id\", policy_id);\n      if(data.length === 0){\n        return (\n            <div className=\"col-sm-4 align-self-center\">\n              <SelectableCard onClick={this.props.onClick}\n                selected={selected}>\n                <div className=\"content\">\n                  <h1 className=\"title\">{title}</h1>\n                  <p className=\"description\">{description}</p>\n                  {/* <BarChart data={data}/> */}\n                </div>\n              </SelectableCard>\n            </div>\n          \n        );\n      }\n      return (\n          <Col lg={{ size: '6'}}>\n            <SelectableCard onClick={this.props.onClick}\n              selected={selected}>\n              <div className=\"content\">\n                <h1 className=\"title\">{title}</h1>\n                <p className=\"description\">{description}</p>\n                <Container fluid={true}>\n                  <PolicyDataBarChart data={data}/>\n                  <PolicyDataBarChart data={data}/>\n                  <PolicyDataBarChart data={data}/>\n                  <PolicyDataBarChart data={data}/>\n                  <PolicyDataBarChart data={data}/>\n                      {/* <div className=\"col-lg-6\" id=\"chartArea\"> */}\n                        {/* <BarChart data={data}/> */}\n                        {/* <PolicyDataBarChart data={data}/>\n                      </div>\n                      <div className=\"col-lg-6\" id=\"chartArea\">\n                        <PolicyDataBarChart data={data}/>\n                     </div>\n                     <div className=\"col-lg-6\" id=\"chartArea\">\n                        <PolicyDataBarChart data={data}/>\n                     </div> */}\n                </Container>\n                \n              </div>\n            </SelectableCard>\n          </Col>\n        \n      );\n    }\n  }\n  \n  class SelectableCardList extends React.Component {\n  \n    constructor(props) {\n      super(props);\n      var selected = props.multiple ? [] : -1;\n      var initialState = {\n        selected: selected.state\n      };\n      this.state = initialState;\n    }\n  \n    onItemSelected(index) {\n\n      this.setState((prevState, props) => {\n        if (props.multiple) {\n          var selectedIndexes = prevState.selected;\n          var selectedIndex = selectedIndexes.indexOf(index);\n          if (selectedIndex > -1) {\n            selectedIndexes.splice(selectedIndex, 1);\n            props.onChange(selectedIndexes);\n          } else {\n            if (!(selectedIndexes.length >= props.maxSelectable)) {\n              selectedIndexes.push(index);\n              props.onChange(selectedIndexes);\n            }\n          }\n          return {\n            selected: selectedIndexes\n          };\n        } else {\n          props.onChange(index);\n          return {\n            selected: index\n          }\n        }\n      });\n    }\n\n    render() {\n      var {\n        contents,\n        multiple,\n      } = this.props;\n      console.log(contents);\n  \n      var content = contents.map((cardContent, i) => {\n        var {\n          title,\n          description,\n          graphData,\n          selected\n        } = cardContent;\n        var selected = multiple ? this.state.selected.indexOf(i) > -1 : this.state.selected === i;\n        return (\n          \n            <SelectableTitleCard key={i} \n            title={title} description={description} data={graphData}\n            // policy_id={policy_id}\n            selected={selected} \n            onClick={(e) => this.onItemSelected(i)} />\n          \n        );\n      });\n      return (\n          <div className=\"cardlist\">\n            <div className=\"row\">\n            {/* <div class=\"d-flex flex-row\"> */}\n              {content.splice(0,content.length-1)}\n            </div>\n            <div className=\"d-flex justify-content-center\">\n            {content[content.length - 1]}\n\n            </div>\n          </div>\n      );\n    }\n  }\n  \n\nexport default SelectableCardList;","import React from 'react';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nexport default function ToggleButtons(props) {\n  const [selected, setSelected] = React.useState(\"\");\n\n  const handleSelected = (event, newSelected) => {\n    setSelected(newSelected);\n    // also need to lift this information up through props\n    props.onSelectChange(newSelected);\n    props.toggleDisabled();\n  };\n\n  return (\n    <ToggleButtonGroup\n      value={selected}\n      exclusive\n      onChange={handleSelected}\n      aria-label=\"policy choices\"\n    >\n      <ToggleButton className=\"bottom_navbar\" value=\"1\" >\n        Policy A\n      </ToggleButton>\n      <ToggleButton className=\"bottom_navbar\" value=\"-1\" >\n        Policy B\n      </ToggleButton>\n      <ToggleButton className=\"bottom_navbar\" value=\"0\">\n        Indifferent\n      </ToggleButton>\n    </ToggleButtonGroup>\n  );\n}","import React, { useState } from 'react';\nimport {\n  Navbar,\n  Nav,\n  NavItem,\n  NavLink,\n  Button,\n  UncontrolledTooltip\n} from 'reactstrap';\nimport ToggleButtons from './ToggleButtons';\n\n\n\nfunction BottomNavBar(props){\n    // take as input an array of section names\n    const sectionNames = props.sectionNames;\n    const [submitDisabled, setSubmitedDisabled] = useState(true);\n\n    const toggleDisabled = () => setSubmitedDisabled(false);\n\n    const makeNavItem = (sectionNames) =>{\n        return(\n        sectionNames.map((name, idx) => {\n            return(\n            <NavItem key={idx + 1}>\n                <NavLink key={idx + 1} href={\"#section_\"+(idx + 1).toString()}>{name}</NavLink>    \n            </NavItem>\n            )\n        }))\n    }\n  \n    return (\n        <React.Fragment>\n            <Navbar color=\"light\" light expand=\"md\" fixed='bottom' style={{paddingLeft: \"1.5rem\",paddingRight: \"1.5rem\"}}>\n                {/* <NavbarBrand href=\"/\">reactstrap</NavbarBrand> */}\n                    <Nav className=\"mr-auto\" navbar>\n                    {makeNavItem(sectionNames)}\n                    </Nav>\n                    <Nav className=\"ms-auto\" navbar>\n                        <ToggleButtons \n                            toggleDisabled={toggleDisabled}\n                            onSelectChange={props.onSelectChange}\n                        >\n\n                        </ToggleButtons>\n                        <span id=\"submitWrapper\">\n                            <Button \n                                className=\"bottom_navbar_submit\"\n                                id=\"submitButton\" \n                                disabled={submitDisabled}\n                                onClick={props.submitChoice}\n                            >\n                                Submit Selection\n                            </Button>\n                        </span>\n                        <UncontrolledTooltip placement=\"top\" target=\"submitWrapper\" hidden={!submitDisabled}>\n                            Please select an option.\n                        </UncontrolledTooltip>\n                        \n                        \n                        \n                        \n                    \n                    </Nav>\n            </Navbar>\n            \n        </React.Fragment>\n    );\n  }\n  \n  export default BottomNavBar;","import React from 'react';\nimport { Jumbotron } from 'reactstrap';\n\nclass PolicyNumberDisplay extends React.Component{\n    constructor(props){\n        super(props)\n        this.data = this.props.data\n        this.columnNums = this.props.columnNums\n    }\n\n    render(){\n        return(\n            <Jumbotron>\n                <h1>{this.data.values.slice(this.columnNums[0],this.columnNums[1]+1).toLocaleString(undefined,\n                    {   \n                        minimumFractionDigits: 0,\n                        maximumFractionDigits: 0,\n                    })}\n                </h1>\n                <p>\n                    {this.data.labels.slice(this.columnNums[0], this.columnNums[1]+1)}\n                </p>\n            </Jumbotron>\n        )\n    }\n}\nexport default PolicyNumberDisplay;","import React from 'react';\nimport { Bar, Pie } from 'react-chartjs-2';\nimport { defaults } from 'react-chartjs-2';\n\n// Disable animating charts by default.\ndefaults.animation = false;\n\nconst backgroundColors = [\n    'rgba(255, 99, 132, 0.2)',\n    'rgba(54, 162, 235, 0.2)',\n    'rgba(255, 206, 86, 0.2)',\n    'rgba(75, 192, 192, 0.2)',\n    'rgba(153, 102, 255, 0.2)',\n    'rgba(255, 159, 64, 0.2)',\n];\n\nconst borderColors = [\n    'rgba(255, 99, 132, 1)',\n    'rgba(54, 162, 235, 1)',\n    'rgba(255, 206, 86, 1)',\n    'rgba(75, 192, 192, 1)',\n    'rgba(153, 102, 255, 1)',\n    'rgba(255, 159, 64, 1)',\n];\n\n\nclass PolicyDataPlot extends React.Component {\n    constructor(props){\n        super(props);\n        this.plotType = this.props.plotType;\n        this.data = this.props.data;\n        this.columnNums= this.props.columnNums; //start and end columns\n        this.plotOptions = {\n            responsive: true,\n            scales: {\n                y: {\n                    ticks: {\n                        // Include a dollar sign in the ticks\n                        callback: function(value, index, values) {\n                            return (value*100).toFixed(0) + \"%\";\n                        }\n                    }\n                }\n             },\n            plugins: {\n                legend: {\n                    display: false\n                }\n            }\n        };\n        this.createChartJsData = this.createChartJsData.bind(this);\n        this.choosePlotType = this.choosePlotType.bind(this);\n    }\n\n\n    createChartJsData(data, plotType, column_start, column_end){\n        var dat = data.values.slice(column_start,column_end+1);\n        this.max = dat.reduce(function(a, b) {return Math.max(a, b);}, 0);\n        console.log(this.max);\n        console.log(this.plotOptions);\n        var labs = data.labels.slice(column_start,column_end+1);\n\n        var bg_colors = backgroundColors.slice(0, (column_end - column_start + 1));\n        var border_colors = borderColors.slice(0, (column_end - column_start + 1));\n\n        if(plotType === \"pie\"){\n            dat.push((1-dat[0]));\n            labs.push(\"Overall Probability of not surviving\");\n            bg_colors = backgroundColors.slice(0, (column_end - column_start + 2)); // do this so we get additional color for completment\n            border_colors = borderColors.slice(0, (column_end - column_start + 2));\n\n            this.plotOptions = {\n                responsive: true,\n                scales: {\n                    y: {\n                        ticks: {\n                            display:false\n                        },\n                        grid: {\n                            display:false,\n                            drawBorder:false\n                        }\n                    },\n                 },\n                plugins: {\n                    legend: {\n                        display: true\n                    }\n                }\n            };\n\n        }\n        const chartData = {\n            labels: labs,\n            datasets: [\n                {\n                    data: dat,\n                    backgroundColor: bg_colors,\n                    borderColor: border_colors,\n                    borderWidth: 1,\n                }\n            ]\n        }\n        // console.log(\"chartData: \", chartData)\n        return chartData;\n    }\n\n    choosePlotType(){\n        console.log(\"plotType \", this.plotType);\n        switch(this.plotType){\n            case \"bar\":\n                return(<Bar data={this.createChartJsData(this.data, this.plotType, this.columnNums[0], this.columnNums[1])}\n                    options={this.plotOptions} redraw={false}\n                />)\n            case \"pie\":\n                return(<Pie data={this.createChartJsData(this.data, this.plotType, this.columnNums[0], this.columnNums[1])}\n                options={this.plotOptions} redraw={false}\n            />)\n            default:\n                return(null)\n        }\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                {this.choosePlotType()}\n            </React.Fragment>\n            \n            \n        )\n    }\n}\n\nexport default PolicyDataPlot;","import React from 'react';\nimport { Col, Container, Row } from 'reactstrap';\nimport PolicyDataBarChart from './PolicyDataBarChart';\nimport PolicyNumberDisplay from './PolicyNumberDisplay';\nimport './PolicyComparisonSection.css'\nimport PolicyDataPlot from './PolicyDataPlots';\n\nclass PolicyComparisonSection extends React.Component{\n    constructor(props){\n        super(props)\n        this.sectionType = this.props.sectionType;\n        this.plotType = this.props.plotType;\n        this.policyData = this.props.policyData;\n        this.columnNums = this.props.columnNums;\n        console.log(\"Policy data: \", this.policyData);\n        this.sectionNum = this.props.sectionNum;\n        this.title=this.props.title\n\n        this.generatePlotColumn = this.generatePlotColumn.bind(this);\n\n    }\n\n    choosePlotType(sectionType, plotType, data, columnNums, idx){\n        console.log(\"sectionType \", sectionType);\n        switch(sectionType){\n            case \"plot\":\n                return( <PolicyDataPlot key={idx} plotType={plotType}\n                     data={data['graphData']} columnNums={columnNums} />);\n            case \"number\":\n                return(<PolicyNumberDisplay key={idx} data={data['graphData']} columnNums={columnNums} />);\n            default:\n                return(null);\n        }\n    }\n\n    generatePlotColumn(policyData){\n        return(\n            policyData.map((data, idx) => {\n                return(\n                    <React.Fragment>\n                        <Col lg=\"6\" className=\"text-center\">\n                            <h3> Policy {(idx + 1) % 2 === 0 ? \"B\" : \"A\" }</h3>\n                            {this.choosePlotType(this.sectionType, this.plotType, data, this.columnNums, idx)}\n                        </Col>\n                    </React.Fragment>\n                )\n            })\n        )\n        \n    }\n\n    render() {\n        return(\n                <div className=\"section_container text-center\" id={\"section_\"+this.sectionNum}>\n                    <h2>\n                        {this.title}\n                    </h2>\n                    <p>Among Those Who Contracted COVID-19 and Needed Critical Care</p>\n                    <Container fluid={true} style={{marginBottom: \"5rem\"}}>\n                        <Row>\n                            {this.generatePlotColumn(this.policyData)}\n                        </Row>    \n                    </Container>\n                    \n                </div>\n        );\n    }\n}\n\nexport default PolicyComparisonSection;","import React from 'react';\nimport SelectableCardList from \"./Card\";\nimport Alert from 'react-bootstrap/Alert';\nimport Loader from \"./Loader\";\nimport BottomNavBar from './NavBar';\nimport { Col, Container, Row } from 'reactstrap';\nimport PolicyDataBarChart from './PolicyDataBarChart';\nimport PolicyComparisonSection from './PolicyComparisonSection';\nimport './PolicyComparisonSection'\n\n// function SelectionErrorAlert(props) {\n//     // const [show, setShow] = useState(false);\n  \n//     if (!props.showError) {\n//       return null\n//     }\n//     return (\n//       <div class=\"d-flex justify-content-center\">\n//         <Alert variant=\"danger\" className=\"text-center\" onClose={() => props.updateShowError(false)} dismissible>\n//           <Alert.Heading>Error</Alert.Heading>\n//           <p>\n//             Please select one of the three options before clicking Next.\n//           </p>\n//         </Alert>\n//       </div>\n//     );\n    \n//   }\n\nclass PairwiseComparison extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            showError: false,\n            selected: -1\n        }\n        this.title = this.props.title;\n        this.loading = this.props.loading\n        this.cardContents = this.props.cardContents;\n        this.graphData = this.props.graphData;\n        this.policy_ids = this.props.policy_ids;\n        this.userChoices = this.props.userChoices;\n        this.stepNum = this.props.stepNum;\n\n        this.incrementStep = this.props.incrementStep;\n\n        this.onListChanged = this.onListChanged.bind(this);\n        this.updateShowError = this.updateShowError.bind(this);\n        this.prepareCardData = this.prepareCardData.bind(this);\n\n\n        // lift up state function\n        this.pushBackChoice = this.pushBackChoice.bind(this);\n        \n        // go to next step or end function\n        this.next = this.props.next;\n\n        this.sectionInfo = [{\n            sectionType : \"plot\",\n            plotType : \"bar\",\n            columnNums: [0,5],\n            sectionName: \"Chance of Receiving Critical Care by Age Group\",\n            sectionDescription: \"Among People Who Need It\",\n          },\n          {\n            sectionType : \"plot\",\n            plotType : \"bar\",\n            columnNums: [9,14],\n            sectionName: \"Survival Probability\",\n            sectionDescription: \"Chance of Surviving by Age Group\"\n          },\n          {\n            sectionType : \"number\",\n            columnNums: [7,7],\n            sectionName: \"Life Years Saved\",\n            sectionDescription: \"\"\n          },\n          {\n            sectionType : \"plot\",\n            plotType : \"pie\",\n            columnNums: [8,8],\n            sectionName: \"Overall Survival Probability\",\n            sectionDescription: \"Among Those Who Contracted COVID-19 and Needed Critical Care\"\n          }\n        ]\n\n    }\n\n    pushBackChoice(selected){\n        this.userChoices.push(selected);\n    }\n\n    onListChanged(selected) {\n        this.setState({\n        selected: selected,\n        }, function(){console.log(this.state.selected)});\n        this.updateShowError(false);\n    }\n\n    updateShowError(show){\n        this.setState({\n        showError: show\n        })\n    }\n\n    submitChoice = (e) => {\n        e.preventDefault();\n        if(this.state.selected === \"\"){\n          console.log(\"somehow got here, but we shouldn't be able to if we have button disabled?\")\n            // this.setState({\n            // showError: true\n            // })\n            \n        } else{\n            this.incrementStep();\n            // hide the error message\n            // this.setState({\n            // showError: false\n            // }); \n            // record the choice made\n            this.pushBackChoice(this.state.selected);\n            \n            \n        }\n    }\n\n    prepareCardData(cardData,graphData,policy_ids){\n        var dat = cardData\n        for(var i=0; i < policy_ids.length; i++){\n            dat[i]['graphData'] = graphData[policy_ids[i]]\n        }\n        return dat;\n    }\n\n\n    render() {\n        // cardContents contains title, description, and graph data\n        // we will use the policy ids to population the graph data element in cardContents\n      return (\n        // <div className=\"column\">\n        <React.Fragment>\n          {this.loading ? <Loader /> : null}\n\n            {this.loading ? null : \n            <div>\n            <Container fluid={false}>\n              <h1 className=\"title\">Query {this.stepNum}</h1>\n              {\n                this.sectionInfo.map((section, index) => {\n                  return(\n                    <PolicyComparisonSection\n                      key={index}\n                      plotType={section.plotType}\n                      sectionType={section.sectionType}\n                      policyData={this.prepareCardData(this.cardContents,this.graphData, this.policy_ids)}\n                      sectionNum={index+1}\n                      columnNums={section.columnNums}\n                      title={section.sectionName}  \n                      description={section.sectionDescription}\n                    />\n                  )\n                })\n              }\n                \n            </Container>\n            <BottomNavBar \n              sectionNames={this.sectionInfo.map((x,idx)=> x.sectionName)} \n              onSelectChange={this.onListChanged}\n              submitChoice={this.submitChoice}\n            />\n            </div>\n            }\n            \n        </React.Fragment>\n        );\n    }\n  }\n\n  export default PairwiseComparison;","import React from 'react';\nimport PairwiseComparison from './PairwiseComparison';\nimport {\n\tCol,\n\tFormGroup,\n\tLabel,\n\tRow,\n    Container\n} from 'reactstrap';\n\n\nclass Step extends React.Component{\n    constructor(props) {\n        super(props)\n        this.stepNum = this.props.stepNum; // which step is this\n        this.currentStep = this.props.currentStep; // which step is the app currently on?\n        this.data = this.props.data;\n        this.loading = this.props.loading;\n        this.userChoices = this.props.userChoices;\n        this.incrementStep = this.props.incrementStep;\n        this.policyData = this.props.policyData;\n        this.policy_ids = this.props.policy_ids;\n    }\n\n    render() { \n        if(this.currentStep !== this.stepNum ){\n            // console.log(\"I am step \"+ this.stepNum+ \" and I am hidden.\" + \" the current step is \" + this.currentStep);\n            return null\n        }\n        return(\n            // <Container fluid={true}>\n                <PairwiseComparison\n                    // title={this.data['query_title']}\n                    title={\"TEST\"}\n                    cardContents={this.data['cardData']}\n                    loading={this.loading}\n                    userChoices = {this.userChoices}\n                    incrementStep={this.incrementStep}\n                    graphData={this.policyData}\n                    policy_ids={this.policy_ids}\n                    stepNum={this.stepNum}\n                    // pass userChoices all the way to PairwiseComparisons and from their lift up state by pushing\n                    // choices back to userChoices in App's state\n\n                />\n            // </Container>\n        );\n    }\n}\n\nclass StepList extends React.Component{\n    constructor(props) {\n        super(props)\n        this.userChoices = this.props.userChoices;\n        this.maxSteps = this.props.maxSteps;\n        this.choiceData = this.props.choiceData;\n        this.currentStep = this.props.currentStep;\n        this.loading = this.props.loading;\n        this.incrementStep = this.props.incrementStep;\n        this.policyData=this.props.policyData;\n        this.policy_ids=this.props.policy_ids;\n        this.sectionNames=this.props.sectionNames;\n    }\n\n\n\n    render() {\n        var numSteps = Array(this.maxSteps).fill().map((element,index) => index+1);\n        // var contents = numSteps.map((elem) => {\n\n        //     return (\n        //         <Step key={elem.toString()} stepNum={elem} currentStep={this.currentStep}\n        //          data={this.choiceData[elem]} loading={this.loading} userChoices={this.userChoices}\n        //          incrementStep={this.incrementStep}/>\n        //     );\n        // });\n        return(\n            <Container fluid={true}>\n                {\n                    numSteps.map((elem) => {\n                            return (\n                            <Step key={elem.toString()} stepNum={elem} currentStep={this.currentStep}\n                             data={this.choiceData[elem-1]} \n                             loading={this.loading} userChoices={this.userChoices}\n                             incrementStep={this.incrementStep}\n                             policyData={this.policyData}\n                             policy_ids={this.policy_ids}\n                             sectionNames={this.sectionNames}\n                             /> \n                             );\n                    })\n                }\n            </Container>\n        )    \n    }\n}\n\nexport default StepList;","export default __webpack_public_path__ + \"static/media/UK_1360beds-25policies.175504d1.csv\";","// read csv and transform into javascript object in long format\n// [ label: \"col name\", value: 32423, policy_id: 1]\n\nimport { csv } from 'd3-fetch';\nimport {nest} from 'd3-collection';\nimport url from './COVID_and_LAHSA_datasets/COVID/UK_1360beds-25policies.csv';\n\n\n// const policy_data = csv(url).then((csv) => {\n\nconst getPolicyData = async(csv) =>{\n    // console.log(csv);\n    var groups = nest().key(d => d.Parameter).entries(csv),\n    result = groups.map(function(d){\n        var obj = d.values[0];\n        delete obj['Parameter']\n        var values = Object.keys(obj).map(function (key) {\n          \n            // Exclude Parameter key value \n            // Using obj[key] to retrieve key value\n            return Number(obj[key]);\n            \n        });\n\n        var labels = Object.keys(obj).map(function (key) {\n          \n            // Exclude Parameter key value \n            // Using obj[key] to retrieve key value\n            return key;\n            \n        });\n        return {\n            policy_id: d.key,\n            values: values,\n            labels: labels\n        };\n  \n    });\n    return result;\n}\n\nexport default getPolicyData;\n","import React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from 'reactstrap';\n\n\n\nconst TopNavBar = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n  \n    const toggle = () => setIsOpen(!isOpen);\n  \n    return (\n        <Navbar color=\"light\" light expand=\"md\" style={{paddingLeft: \"1.5rem\"}}>\n          <NavbarBrand href=\"/\">\n              Active Preference Elicitation <span role=\"img\" aria-label=\"crystal ball\">🔮</span>\n              \n            </NavbarBrand>\n          {/* <NavbarToggler onClick={toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav  navbar>\n              <NavItem>\n                <NavLink href=\"/components/\">Components</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\n              </NavItem>\n              <UncontrolledDropdown nav inNavbar>\n                <DropdownToggle nav caret>\n                  Options\n                </DropdownToggle>\n                <DropdownMenu right>\n                  <DropdownItem>\n                    Option 1\n                  </DropdownItem>\n                  <DropdownItem>\n                    Option 2\n                  </DropdownItem>\n                  <DropdownItem divider />\n                  <DropdownItem>\n                    Reset\n                  </DropdownItem>\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            </Nav>\n            <NavbarText>Simple Text</NavbarText>\n          </Collapse> */}\n        </Navbar>\n    );\n  }\n  \n  export default TopNavBar;","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport _ from 'lodash';\n\nimport {\n  Container,\n} from 'reactstrap';\n\nimport StartPage from './StartPage';\nimport UserInfoForm from './UserInfoForm';\nimport Loader from \"./Loader\";\nimport choiceData from \"./mockChoiceData\";\nimport StepList from './StepGenerator';\nimport getPolicyData from './transformCsvFiles';\nimport policy_data_path from './COVID_and_LAHSA_datasets/COVID/UK_1360beds-25policies.csv';\nimport { csv } from 'd3-fetch';\nimport BottomNavBar from './NavBar';\nimport TopNavBar from './TopNavBar';\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      // track which step we are on and the choices made so far\n      currentStep: 0,\n      userChoices : [],\n\n      // handle loading screen toggle\n      loading: false,\n\n      // toggle show Userinfo form\n      showUserInfoForm: false,\n\n      // toggle show Start page\n      showStartPage: true,\n\n      // toggle show steps\n      showSteps: false,\n\n      policy_ids: [0,1],\n      policyData: [],\n\n      // form info\n      userInfo: {\n        username: '',\n        age: '',\n        race_ethnicity: '',\n        gender: '',\n        marital_status: '',\n        education: '',\n        political: '',\n        positive_family: '',\n        positive_anyone: '',\n        healthcare_yn: '',\n        healthcare_role: ''\n      }\n    }\n    this.maxSteps = choiceData.length;\n    this.uuid = uuidv4();\n    // use this for barchart\n    // this.policyData = policy_data;\n    // console.log(this.policyData);\n\n    this.choiceData = choiceData;\n\n    // binding functions\n    this.toggleUserInfoForm = this.toggleUserInfoForm.bind(this);\n    this.toggleStartPage = this.toggleStartPage.bind(this);\n    this.updateUserInfo = this.updateUserInfo.bind(this);\n    this.incrementStep = this.incrementStep.bind(this);\n\n  }\n\n  incrementStep(){\n    this.setState({\n      currentStep : this.state.currentStep + 1\n    }, function(){ console.log(this.state.currentStep)})\n    if(this.state.currentStep === 0){\n      this.toggleShowSteps();\n    }\n  }\n\n  toggleShowSteps(){\n    this.setState({ showSteps: !this.state.showSteps})\n  }\n\n  toggleStartPage(){\n    this.setState({ showStartPage: !this.state.showStartPage})\n  }\n\n  toggleUserInfoForm(){\n    this.setState({ showUserInfoForm: !this.state.showUserInfoForm})\n  }\n\n  updateUserInfo(data){\n    // remove form errors messages from the object\n    var toUpdate = _.omit(data, [\"defaultMessage\", \"selectFieldMessage\",\n     \"usernameFieldMessage\", \"healthcareroleFieldMessage\"])\n    this.setState({\n      userInfo: toUpdate\n    }, \n    function(){console.log(this.state.userInfo)}\n    )\n  }\n  \n  async componentDidMount() {\n    \n    // get IP info\n    // const response = await fetch('https://geolocation-db.com/json/');\n    // const data = await response.json();\n    // this.setState({ ip: data.IPv4 })\n    // // parse query string info\n    // const urlSearchParams = new URLSearchParams(window.location.search);\n    // const params = Object.fromEntries(urlSearchParams.entries());\n    // // only want param mturk\n    // if(params['mturk']){\n    //   this.mturk = true;\n    // }\n\n    const csvData = await csv(policy_data_path)\n    const cleanedData = await getPolicyData(csvData);\n    this.setState({\n      policyData: cleanedData\n    }, function(){console.log(this.state.policyData)})\n\n\n  }\n  render() {\n    return(\n      <React.Fragment>\n        {/* <h1>Active Preference Elicitation <span role=\"img\" aria-label=\"crystal ball\">🔮</span> </h1> */}\n        <TopNavBar></TopNavBar>\n        <Container fluid={true} style={{marginTop : \"1rem\", marginBottom: \"10rem\"}}>\n          \n          <StartPage showStartPage={this.state.showStartPage}\n          toggleStartPage={this.toggleStartPage}\n          toggleUserInfoForm={this.toggleUserInfoForm}\n          />\n          <UserInfoForm showForm={this.state.showUserInfoForm}\n          toggleUserInfoForm={this.toggleUserInfoForm} updateUserInfo={this.updateUserInfo}\n          incrementStep={this.incrementStep} />\n          {this.state.showSteps ? \n            <StepList \n              key={this.state.currentStep.toString()} // key necessary for ensuring re-render on state change\n              userChoices={this.state.userChoices}\n              maxSteps={this.maxSteps}\n              choiceData={this.choiceData}\n              policyData={this.state.policyData}\n              policy_ids={this.state.policy_ids}\n              currentStep={this.state.currentStep}\n              loading={this.state.loading}\n              incrementStep={this.incrementStep}\n            /> : \n            null\n          }\n        </Container>\n        \n        {/* <EndPage></EndPage> */}\n        {/* <BottomNavBar></BottomNavBar> */}\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n// import MasterForm from './Form'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    {/* <MasterForm /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const defaultMessage = 'Please fill out all required fields';\nconst selectFieldMessage = 'Please select one of the options';\nconst usernameFieldMessage = 'Please enter a Worker ID';\nconst healthcareroleFieldMessage = 'If you chose yes to the above question, please enter in your job title. Otherwise please enter in NA.';\n\nexports.defaultMessage = defaultMessage;\nexports.selectFieldMessage = selectFieldMessage;\nexports.usernameFieldMessage = usernameFieldMessage;\nexports.healthcareroleFieldMessage = healthcareroleFieldMessage;"],"sourceRoot":""}